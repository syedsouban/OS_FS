
;; Function GlobalDescriptorTable::GlobalDescriptorTable() (_ZN21GlobalDescriptorTableC2Ev, funcdef_no=1, decl_uid=1113, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 40:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) p

********** Pseudo live ranges #1: **********

  BB 2
   Insn 45: point = 0
   Insn 42: point = 0
   Insn 41: point = 1
   Insn 40: point = 1
   Insn 39: point = 2
   Insn 38: point = 3
   Insn 37: point = 4
   Insn 36: point = 5
   Insn 35: point = 6
   Insn 34: point = 6
   Insn 33: point = 6
   Insn 32: point = 7
   Insn 31: point = 7
   Insn 30: point = 7
   Insn 29: point = 7
   Insn 28: point = 9
   Insn 27: point = 10
   Insn 26: point = 10
   Insn 25: point = 10
   Insn 24: point = 11
   Insn 23: point = 11
   Insn 22: point = 11
   Insn 21: point = 11
   Insn 20: point = 13
   Insn 19: point = 14
   Insn 18: point = 14
   Insn 17: point = 14
   Insn 16: point = 15
   Insn 15: point = 15
   Insn 14: point = 15
   Insn 13: point = 15
   Insn 12: point = 17
   Insn 11: point = 18
   Insn 10: point = 18
   Insn 9: point = 18
   Insn 8: point = 19
   Insn 7: point = 19
   Insn 6: point = 19
   Insn 5: point = 19
Compressing live ranges: from 20 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 5
changing reg in insn 9
changing reg in insn 13
changing reg in insn 17
changing reg in insn 21
changing reg in insn 25
changing reg in insn 29
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 42
changing reg in insn 41
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 28
changing reg in insn 29
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 34.


GlobalDescriptorTable::GlobalDescriptorTable()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags] 18[fpsr]
;;  ref usage 	r0={16d,11u} r1={5d} r2={5d} r6={1d,10u} r7={21d,30u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={3e} r17={14d} r18={5d} r19={4d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 399{344d,52u,3e} in 39{35 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:87 D.1281 ] [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 7 6 8 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 8 7 9 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 9 8 10 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:87 D.1281 ] [87])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 12 11 13 2 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 0 ax [orig:88 D.1281 ] [88])
                (plus:SI (reg/f:SI 0 ax [94])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 14 13 15 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 15 14 16 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 16 15 17 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 17 16 18 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.1281 ] [88])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 18 17 19 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 20 19 21 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg/f:SI 0 ax [orig:89 D.1281 ] [89])
                (plus:SI (reg/f:SI 0 ax [95])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 22 21 23 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 154 [0x9a])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 23 22 24 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 67108864 [0x4000000])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 24 23 25 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 25 24 26 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:89 D.1281 ] [89])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 26 25 27 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 27 26 28 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 28 27 29 2 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:SI 0 ax [orig:90 D.1281 ] [90])
                (plus:SI (reg/f:SI 0 ax [96])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 30 29 31 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 146 [0x92])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 31 30 32 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 67108864 [0x4000000])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 32 31 33 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 33 32 34 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:90 D.1281 ] [90])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 34 33 35 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 35 34 36 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 36 35 37 2 (set (reg:SI 0 ax [orig:91 D.1282 ] [91])
        (const_int 2097152 [0x200000])) gdt.cpp:16 90 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (mem/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (reg:SI 0 ax [orig:91 D.1282 ] [91])) gdt.cpp:16 90 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:SI 0 ax [orig:92 D.1282 ] [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:17 90 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (mem/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+4 S4 A32])
        (reg:SI 0 ax [orig:92 D.1282 ] [92])) gdt.cpp:17 90 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (parallel [
            (set (reg/f:SI 0 ax [orig:93 D.1283 ] [93])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:18 217 {*addsi_1}
     (nil))
(insn 41 40 42 2 (parallel [
            (set (reg/f:SI 0 ax [orig:93 D.1283 ] [93])
                (plus:SI (reg/f:SI 0 ax [orig:93 D.1283 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:18 217 {*addsi_1}
     (nil))
(insn 42 41 45 2 (parallel [
            (asm_operands/v ("lgdt (%0)") ("") 0 [
                    (reg/f:SI 0 ax [orig:93 D.1283 ] [93])
                ]
                 [
                    (asm_input:SI ("p") gdt.cpp:18)
                ]
                 [] gdt.cpp:18)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) gdt.cpp:18 -1
     (nil))
(insn 45 42 46 2 (const_int 0 [0]) gdt.cpp:19 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 46 45 0 NOTE_INSN_DELETED)

;; Function GlobalDescriptorTable::~GlobalDescriptorTable() (_ZN21GlobalDescriptorTableD2Ev, funcdef_no=4, decl_uid=1118, cgraph_uid=4, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


GlobalDescriptorTable::~GlobalDescriptorTable()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 6[bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 11{6d,5u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (const_int 0 [0]) gdt.cpp:24 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 8 7 0 NOTE_INSN_DELETED)

;; Function uint16_t GlobalDescriptorTable::GetDataSegmentOffset() (_ZN21GlobalDescriptorTable20GetDataSegmentOffsetEv, funcdef_no=6, decl_uid=1107, cgraph_uid=6, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) r  (1) rn {*movhi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0
   Insn 12: point = 0
   Insn 8: point = 1
   Insn 5: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 8
changing reg in insn 8
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


uint16_t GlobalDescriptorTable::GetDataSegmentOffset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 18{9d,9u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 8 2 (set (reg:HI 0 ax [orig:87 D.1284 ] [87])
        (const_int 24 [0x18])) gdt.cpp:30 92 {*movhi_internal}
     (nil))
(insn 8 5 12 2 (set (reg:HI 0 ax [orig:88 <retval> ] [88])
        (reg:HI 0 ax [orig:87 D.1284 ] [87])) gdt.cpp:30 92 {*movhi_internal}
     (nil))
(insn 12 8 13 2 (set (reg/i:HI 0 ax)
        (reg:HI 0 ax [orig:88 <retval> ] [88])) gdt.cpp:31 92 {*movhi_internal}
     (nil))
(insn 13 12 15 2 (use (reg/i:HI 0 ax)) gdt.cpp:31 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 13 0 NOTE_INSN_DELETED)

;; Function uint16_t GlobalDescriptorTable::GetCodeSegmentOffset() (_ZN21GlobalDescriptorTable20GetCodeSegmentOffsetEv, funcdef_no=7, decl_uid=1109, cgraph_uid=7, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) r  (1) rn {*movhi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0
   Insn 12: point = 0
   Insn 8: point = 1
   Insn 5: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 8
changing reg in insn 8
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


uint16_t GlobalDescriptorTable::GetCodeSegmentOffset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 18{9d,9u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 8 2 (set (reg:HI 0 ax [orig:87 D.1285 ] [87])
        (const_int 16 [0x10])) gdt.cpp:35 92 {*movhi_internal}
     (nil))
(insn 8 5 12 2 (set (reg:HI 0 ax [orig:88 <retval> ] [88])
        (reg:HI 0 ax [orig:87 D.1285 ] [87])) gdt.cpp:35 92 {*movhi_internal}
     (nil))
(insn 12 8 13 2 (set (reg/i:HI 0 ax)
        (reg:HI 0 ax [orig:88 <retval> ] [88])) gdt.cpp:36 92 {*movhi_internal}
     (nil))
(insn 13 12 15 2 (use (reg/i:HI 0 ax)) gdt.cpp:36 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 13 0 NOTE_INSN_DELETED)

;; Function GlobalDescriptorTable::SegmentDescriptor::SegmentDescriptor(uint32_t, uint32_t, uint8_t) (_ZN21GlobalDescriptorTable17SegmentDescriptorC2Ejjh, funcdef_no=9, decl_uid=1087, cgraph_uid=9, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 3:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 37:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 43:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 49:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 58:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 60:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 65:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 71:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 77:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =qm {*setcc_qi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 85:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 87:  (0) r  (1) r  (2) le {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 89:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 92: point = 0
   Insn 89: point = 0
   Insn 88: point = 1
   Insn 87: point = 2
   Insn 86: point = 4
   Insn 85: point = 5
   Insn 84: point = 6
   Insn 83: point = 8
   Insn 82: point = 9
   Insn 81: point = 10
   Insn 80: point = 12
   Insn 79: point = 13
   Insn 78: point = 15
   Insn 77: point = 16
   Insn 76: point = 17
   Insn 75: point = 19
   Insn 74: point = 21
   Insn 73: point = 22
   Insn 72: point = 24
   Insn 71: point = 25
   Insn 70: point = 26
   Insn 69: point = 28
   Insn 68: point = 30
   Insn 67: point = 31
   Insn 66: point = 33
   Insn 65: point = 34
   Insn 64: point = 35
   Insn 63: point = 37
   Insn 62: point = 38
   Insn 61: point = 40
   Insn 60: point = 41
   Insn 59: point = 42
   Insn 58: point = 44
   Insn 57: point = 46
   Insn 56: point = 48
   Insn 55: point = 50
   Insn 54: point = 51
   Insn 53: point = 53
   Insn 52: point = 55
   Insn 51: point = 56
   Insn 50: point = 58
   Insn 49: point = 59
   Insn 48: point = 60
   Insn 47: point = 62
   Insn 46: point = 64
   Insn 45: point = 65
   Insn 44: point = 67
   Insn 43: point = 68
   Insn 42: point = 69
   Insn 41: point = 70
   Insn 40: point = 72
  BB 3
   Insn 93: point = 73
   Insn 14: point = 73
   Insn 13: point = 74
   Insn 12: point = 76
  BB 7
   Insn 37: point = 77
   Insn 36: point = 78
   Insn 35: point = 80
  BB 5
   Insn 95: point = 81
   Insn 27: point = 81
   Insn 26: point = 82
   Insn 25: point = 84
   Insn 24: point = 86
  BB 6
   Insn 32: point = 87
  BB 4
   Insn 22: point = 87
   Insn 21: point = 87
   Insn 20: point = 88
   Insn 19: point = 90
  BB 2
   Insn 10: point = 91
   Insn 9: point = 91
   Insn 8: point = 91
   Insn 7: point = 92
   Insn 3: point = 93
   Insn 2: point = 94
 r87: [73..74]
 r88: [87..88]
 r89: [83..84]
 r90: [77..78]
 r91: [68..70]
 r92: [59..65]
 r93: [61..62]
 r94: [59..60]
 r95: [41..56]
 r96: [52..53]
 r97: [43..51]
 r98: [47..48]
 r99: [45..46]
 r100: [43..44]
 r101: [41..42]
 r102: [34..38]
 r103: [34..35]
 r104: [25..31]
 r105: [27..28]
 r106: [25..26]
 r107: [16..22]
 r108: [18..19]
 r109: [16..17]
 r110: [5..13]
 r111: [9..10]
 r112: [7..8]
 r113: [5..6]
 r114: [0..2]
 r115: [93..94]
 r116: [91..92]
 r117: [75..76]
 r118: [89..90]
 r119: [85..86]
 r120: [81..82]
 r121: [79..80]
 r122: [71..72]
 r123: [68..69]
 r124: [66..67]
 r125: [63..64]
 r126: [57..58]
 r127: [54..55]
 r128: [49..50]
 r129: [39..40]
 r130: [36..37]
 r131: [32..33]
 r132: [29..30]
 r133: [23..24]
 r134: [20..21]
 r135: [14..15]
 r136: [11..12]
 r137: [3..4]
 r138: [0..1]
Compressing live ranges: from 95 to 86 - 90%
Ranges after the compression:
 r87: [64..65]
 r88: [78..79]
 r89: [74..75]
 r90: [68..69]
 r91: [60..61]
 r92: [52..57]
 r93: [54..55]
 r94: [52..53]
 r95: [36..49]
 r96: [46..47]
 r97: [38..45]
 r98: [42..43]
 r99: [40..41]
 r100: [38..39]
 r101: [36..37]
 r102: [30..33]
 r103: [30..31]
 r104: [22..27]
 r105: [24..25]
 r106: [22..23]
 r107: [14..19]
 r108: [16..17]
 r109: [14..15]
 r110: [4..11]
 r111: [8..9]
 r112: [6..7]
 r113: [4..5]
 r114: [0..1]
 r115: [84..85]
 r116: [82..83]
 r117: [66..67]
 r118: [80..81]
 r119: [76..77]
 r120: [72..73]
 r121: [70..71]
 r122: [62..63]
 r123: [60..61]
 r124: [58..59]
 r125: [56..57]
 r126: [50..51]
 r127: [48..49]
 r128: [44..45]
 r129: [34..35]
 r130: [32..33]
 r131: [28..29]
 r132: [26..27]
 r133: [20..21]
 r134: [18..19]
 r135: [12..13]
 r136: [10..11]
 r137: [2..3]
 r138: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 43
changing reg in insn 45
changing reg in insn 49
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 60
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 71
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 77
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 85
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 2
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
deleting insn with uid = 84.
starting the processing of deferred insns
ending the processing of deferred insns


GlobalDescriptorTable::SegmentDescriptor::SegmentDescriptor(uint32_t, uint32_t, uint8_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 17[flags]
;;  ref usage 	r0={28d,27u} r1={24d,23u} r2={2d,1u} r6={1d,37u} r7={1d,8u} r16={7e} r17={24d,3u} r20={1d,1u,10e} 
;;    total ref usage 198{81d,100u,17e} in 73{73 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 access_byte+0 S4 A32])) gdt.cpp:38 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 access_byte+0 S1 A32])
        (reg:QI 0 ax [115])) gdt.cpp:38 93 {*movqi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:40 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
        (reg/f:SI 0 ax [116])) gdt.cpp:40 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 limit+0 S4 A32])
            (const_int 65536 [0x10000]))) gdt.cpp:41 7 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) gdt.cpp:41 612 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 117
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:43 90 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 0 ax [orig:87 D.1286 ] [87])
                (plus:SI (reg/f:SI 0 ax [117])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:43 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 6 [0x6]))
        (nil)))
(insn 14 13 93 3 (set (mem:QI (reg/f:SI 0 ax [orig:87 D.1286 ] [87]) [0 *_7+0 S1 A8])
        (const_int 64 [0x40])) gdt.cpp:43 93 {*movqi_internal}
     (nil))
(jump_insn 93 14 94 3 (set (pc)
        (label_ref 38)) 654 {jump}
     (nil)
 -> 38)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 17)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 118
(code_label 17 94 18 4 8 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 limit+0 S4 A32])) gdt.cpp:47 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:SI 0 ax [orig:88 D.1287 ] [88])
                (and:SI (reg:SI 0 ax [118])
                    (const_int 4095 [0xfff])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:47 381 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 limit+0 S4 A32])
            (const_int 4095 [0xfff]))
        (nil)))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.1287 ] [88])
            (const_int 4095 [0xfff]))) gdt.cpp:47 7 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) gdt.cpp:47 612 {*jcc_1}
     (nil)
 -> 30)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 119 120
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 ax [119])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 limit+0 S4 A32])) gdt.cpp:48 90 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:SI 0 ax [orig:89 D.1287 ] [89])
                (lshiftrt:SI (reg:SI 0 ax [119])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:48 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 limit+0 S4 A32])
            (const_int 12 [0xc]))
        (nil)))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 0 ax [120])
                (plus:SI (reg:SI 0 ax [orig:89 D.1287 ] [89])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:48 217 {*addsi_1}
     (nil))
(insn 27 26 95 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 limit+0 S4 A32])
        (reg:SI 0 ax [120])) gdt.cpp:48 90 {*movsi_internal}
     (nil))
(jump_insn 95 27 96 5 (set (pc)
        (label_ref 33)) 654 {jump}
     (nil)
 -> 33)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 96 95 30)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 96 31 6 10 "" [1 uses])
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int 16 [0x10])) [0 limit+0 S4 A32])
                (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 16 [0x10])) [0 limit+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:50 544 {*lshrsi3_1}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 121
(code_label 33 32 34 7 11 "" [1 uses])
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:51 90 {*movsi_internal}
     (nil))
(insn 36 35 37 7 (parallel [
            (set (reg/f:SI 0 ax [orig:90 D.1286 ] [90])
                (plus:SI (reg/f:SI 0 ax [121])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:51 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 6 [0x6]))
        (nil)))
(insn 37 36 38 7 (set (mem:QI (reg/f:SI 0 ax [orig:90 D.1286 ] [90]) [0 *_14+0 S1 A8])
        (const_int -64 [0xffffffffffffffc0])) gdt.cpp:51 93 {*movqi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138
(code_label 38 37 39 8 9 "" [1 uses])
(note 39 38 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 limit+0 S4 A32])) gdt.cpp:53 90 {*movsi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:QI 1 dx [orig:91 D.1288 ] [91])
        (reg:QI 0 ax [122])) gdt.cpp:53 93 {*movqi_internal}
     (nil))
(insn 42 41 43 8 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:53 90 {*movsi_internal}
     (nil))
(insn 43 42 44 8 (set (mem:QI (reg/f:SI 0 ax [123]) [0 *target_5+0 S1 A8])
        (reg:QI 1 dx [orig:91 D.1288 ] [91])) gdt.cpp:53 93 {*movqi_internal}
     (nil))
(insn 44 43 45 8 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:54 90 {*movsi_internal}
     (nil))
(insn 45 44 46 8 (parallel [
            (set (reg/f:SI 0 ax [orig:92 D.1286 ] [92])
                (plus:SI (reg/f:SI 0 ax [124])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:54 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 46 45 47 8 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 limit+0 S4 A32])) gdt.cpp:54 90 {*movsi_internal}
     (nil))
(insn 47 46 48 8 (parallel [
            (set (reg:SI 1 dx [orig:93 D.1287 ] [93])
                (lshiftrt:SI (reg:SI 1 dx [125])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:54 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 limit+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 48 47 49 8 (set (reg:QI 1 dx [orig:94 D.1288 ] [94])
        (reg:QI 1 dx [orig:93 D.1287 ] [93])) gdt.cpp:54 93 {*movqi_internal}
     (nil))
(insn 49 48 50 8 (set (mem:QI (reg/f:SI 0 ax [orig:92 D.1286 ] [92]) [0 *_18+0 S1 A8])
        (reg:QI 1 dx [orig:94 D.1288 ] [94])) gdt.cpp:54 93 {*movqi_internal}
     (nil))
(insn 50 49 51 8 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:55 90 {*movsi_internal}
     (nil))
(insn 51 50 52 8 (parallel [
            (set (reg/f:SI 0 ax [orig:95 D.1286 ] [95])
                (plus:SI (reg/f:SI 0 ax [126])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 6 [0x6]))
        (nil)))
(insn 52 51 53 8 (set (reg/f:SI 1 dx [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:55 90 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg/f:SI 1 dx [orig:96 D.1286 ] [96])
                (plus:SI (reg/f:SI 1 dx [127])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 6 [0x6]))
        (nil)))
(insn 54 53 55 8 (set (reg:QI 2 cx [orig:97 D.1288 ] [97])
        (mem:QI (reg/f:SI 1 dx [orig:96 D.1286 ] [96]) [0 *_23+0 S1 A8])) gdt.cpp:55 93 {*movqi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:SI 1 dx [128])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 limit+0 S4 A32])) gdt.cpp:55 90 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:SI 1 dx [orig:98 D.1287 ] [98])
                (lshiftrt:SI (reg:SI 1 dx [128])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 limit+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 57 56 58 8 (set (reg:QI 1 dx [orig:99 D.1288 ] [99])
        (reg:QI 1 dx [orig:98 D.1287 ] [98])) gdt.cpp:55 93 {*movqi_internal}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg:QI 1 dx [orig:100 D.1288 ] [100])
                (and:QI (reg:QI 1 dx [orig:99 D.1288 ] [99])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 384 {*andqi_1}
     (nil))
(insn 59 58 60 8 (parallel [
            (set (reg:QI 1 dx [orig:101 D.1288 ] [101])
                (ior:QI (reg:QI 1 dx [orig:100 D.1288 ] [100])
                    (reg:QI 2 cx [orig:97 D.1288 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 405 {*iorqi_1}
     (nil))
(insn 60 59 61 8 (set (mem:QI (reg/f:SI 0 ax [orig:95 D.1286 ] [95]) [0 *_22+0 S1 A8])
        (reg:QI 1 dx [orig:101 D.1288 ] [101])) gdt.cpp:55 93 {*movqi_internal}
     (nil))
(insn 61 60 62 8 (set (reg/f:SI 0 ax [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:57 90 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (parallel [
            (set (reg/f:SI 0 ax [orig:102 D.1286 ] [102])
                (plus:SI (reg/f:SI 0 ax [129])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:57 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 63 62 64 8 (set (reg:SI 1 dx [130])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 base+0 S4 A32])) gdt.cpp:57 90 {*movsi_internal}
     (nil))
(insn 64 63 65 8 (set (reg:QI 1 dx [orig:103 D.1288 ] [103])
        (reg:QI 1 dx [130])) gdt.cpp:57 93 {*movqi_internal}
     (nil))
(insn 65 64 66 8 (set (mem:QI (reg/f:SI 0 ax [orig:102 D.1286 ] [102]) [0 *_30+0 S1 A8])
        (reg:QI 1 dx [orig:103 D.1288 ] [103])) gdt.cpp:57 93 {*movqi_internal}
     (nil))
(insn 66 65 67 8 (set (reg/f:SI 0 ax [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:58 90 {*movsi_internal}
     (nil))
(insn 67 66 68 8 (parallel [
            (set (reg/f:SI 0 ax [orig:104 D.1286 ] [104])
                (plus:SI (reg/f:SI 0 ax [131])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:58 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 68 67 69 8 (set (reg:SI 1 dx [132])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 base+0 S4 A32])) gdt.cpp:58 90 {*movsi_internal}
     (nil))
(insn 69 68 70 8 (parallel [
            (set (reg:SI 1 dx [orig:105 D.1287 ] [105])
                (lshiftrt:SI (reg:SI 1 dx [132])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:58 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 base+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 70 69 71 8 (set (reg:QI 1 dx [orig:106 D.1288 ] [106])
        (reg:QI 1 dx [orig:105 D.1287 ] [105])) gdt.cpp:58 93 {*movqi_internal}
     (nil))
(insn 71 70 72 8 (set (mem:QI (reg/f:SI 0 ax [orig:104 D.1286 ] [104]) [0 *_34+0 S1 A8])
        (reg:QI 1 dx [orig:106 D.1288 ] [106])) gdt.cpp:58 93 {*movqi_internal}
     (nil))
(insn 72 71 73 8 (set (reg/f:SI 0 ax [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:59 90 {*movsi_internal}
     (nil))
(insn 73 72 74 8 (parallel [
            (set (reg/f:SI 0 ax [orig:107 D.1286 ] [107])
                (plus:SI (reg/f:SI 0 ax [133])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:59 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 4 [0x4]))
        (nil)))
(insn 74 73 75 8 (set (reg:SI 1 dx [134])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 base+0 S4 A32])) gdt.cpp:59 90 {*movsi_internal}
     (nil))
(insn 75 74 76 8 (parallel [
            (set (reg:SI 1 dx [orig:108 D.1287 ] [108])
                (lshiftrt:SI (reg:SI 1 dx [134])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:59 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 base+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 76 75 77 8 (set (reg:QI 1 dx [orig:109 D.1288 ] [109])
        (reg:QI 1 dx [orig:108 D.1287 ] [108])) gdt.cpp:59 93 {*movqi_internal}
     (nil))
(insn 77 76 78 8 (set (mem:QI (reg/f:SI 0 ax [orig:107 D.1286 ] [107]) [0 *_38+0 S1 A8])
        (reg:QI 1 dx [orig:109 D.1288 ] [109])) gdt.cpp:59 93 {*movqi_internal}
     (nil))
(insn 78 77 79 8 (set (reg/f:SI 0 ax [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:60 90 {*movsi_internal}
     (nil))
(insn 79 78 80 8 (parallel [
            (set (reg/f:SI 0 ax [orig:110 D.1286 ] [110])
                (plus:SI (reg/f:SI 0 ax [135])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:60 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 7 [0x7]))
        (nil)))
(insn 80 79 81 8 (set (reg:SI 1 dx [136])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 base+0 S4 A32])) gdt.cpp:60 90 {*movsi_internal}
     (nil))
(insn 81 80 82 8 (parallel [
            (set (reg:SI 1 dx [orig:111 D.1287 ] [111])
                (lshiftrt:SI (reg:SI 1 dx [136])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:60 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 base+0 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 82 81 83 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:111 D.1287 ] [111])
            (const_int 0 [0]))) gdt.cpp:60 3 {*cmpsi_ccno_1}
     (nil))
(insn 83 82 85 8 (set (reg:QI 1 dx [orig:112 D.1289 ] [112])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) gdt.cpp:60 607 {*setcc_qi}
     (nil))
(insn 85 83 86 8 (set (mem:QI (reg/f:SI 0 ax [orig:110 D.1286 ] [110]) [0 *_42+0 S1 A8])
        (reg:QI 1 dx [orig:113 D.1288 ] [113])) gdt.cpp:60 93 {*movqi_internal}
     (nil))
(insn 86 85 87 8 (set (reg/f:SI 0 ax [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:62 90 {*movsi_internal}
     (nil))
(insn 87 86 88 8 (parallel [
            (set (reg/f:SI 1 dx [orig:114 D.1286 ] [114])
                (plus:SI (reg/f:SI 0 ax [137])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:62 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 5 [0x5]))
        (nil)))
(insn 88 87 89 8 (set (reg:QI 0 ax [138])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 access_byte+0 S1 A32])) gdt.cpp:62 93 {*movqi_internal}
     (nil))
(insn 89 88 92 8 (set (mem:QI (reg/f:SI 1 dx [orig:114 D.1286 ] [114]) [0 *_47+0 S1 A8])
        (reg:QI 0 ax [138])) gdt.cpp:62 93 {*movqi_internal}
     (nil))
(insn 92 89 97 8 (const_int 0 [0]) gdt.cpp:63 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 97 92 0 NOTE_INSN_DELETED)

;; Function uint32_t GlobalDescriptorTable::SegmentDescriptor::GetBase() (_ZN21GlobalDescriptorTable17SegmentDescriptor7GetBaseEv, funcdef_no=11, decl_uid=1078, cgraph_uid=11, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=116 from oldreg=89, assigning class GENERAL_REGS to r116
   13: {r116:SI=r116:SI<<0x8;clobber flags:CC;}
      REG_DEAD r106:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x8]<<0x8
    Inserting insn reload before:
   47: r116:SI=r106:SI
    Inserting insn reload after:
   48: r89:SI=r116:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=117 from oldreg=93, assigning class GENERAL_REGS to r117
   21: {r117:SI=r117:SI<<0x8;clobber flags:CC;}
      REG_DEAD r109:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x8]<<0x8
    Inserting insn reload before:
   49: r117:SI=r109:SI
    Inserting insn reload after:
   50: r93:SI=r117:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=118 from oldreg=97, assigning class GENERAL_REGS to r118
   29: {r118:SI=r118:SI<<0x8;clobber flags:CC;}
      REG_DEAD r112:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x8]<<0x8
    Inserting insn reload before:
   51: r118:SI=r112:SI
    Inserting insn reload after:
   52: r97:SI=r118:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 44: point = 0
   Insn 43: point = 0
   Insn 39: point = 1
   Insn 36: point = 3
   Insn 35: point = 4
   Insn 34: point = 5
   Insn 33: point = 7
   Insn 32: point = 9
   Insn 31: point = 11
   Insn 30: point = 13
   Insn 52: point = 14
	Hard reg 1 is preferable by r118 with profit 1
   Insn 29: point = 16
   Insn 51: point = 16
	Hard reg 1 is preferable by r118 with profit 1
	Hard reg 0 is preferable by r118 with profit 1
   Insn 28: point = 18
   Insn 27: point = 19
   Insn 26: point = 20
   Insn 25: point = 22
   Insn 24: point = 24
   Insn 23: point = 26
   Insn 22: point = 28
   Insn 50: point = 29
	Hard reg 1 is preferable by r117 with profit 1
   Insn 21: point = 31
   Insn 49: point = 31
	Hard reg 1 is preferable by r117 with profit 1
	Hard reg 0 is preferable by r117 with profit 1
   Insn 20: point = 33
   Insn 19: point = 34
   Insn 18: point = 35
   Insn 17: point = 37
   Insn 16: point = 39
   Insn 15: point = 41
   Insn 14: point = 43
   Insn 48: point = 44
	Hard reg 1 is preferable by r116 with profit 1
   Insn 13: point = 46
   Insn 47: point = 46
	Hard reg 1 is preferable by r116 with profit 1
	Hard reg 0 is preferable by r116 with profit 1
   Insn 12: point = 48
   Insn 11: point = 49
   Insn 10: point = 50
   Insn 9: point = 52
   Insn 8: point = 54
   Insn 7: point = 56
   Insn 6: point = 57
   Insn 5: point = 58
 r87: [53..54]
 r88: [51..52]
 r89: [36..44]
 r90: [40..41]
 r91: [38..39]
 r92: [36..37]
 r93: [21..29]
 r94: [25..26]
 r95: [23..24]
 r96: [21..22]
 r97: [6..14]
 r98: [10..11]
 r99: [8..9]
 r100: [6..7]
 r101: [2..3]
 r102: [0..1]
 r103: [57..58]
 r104: [55..56]
 r105: [49..50]
 r106: [47..48]
 r107: [42..43]
 r108: [34..35]
 r109: [32..33]
 r110: [27..28]
 r111: [19..20]
 r112: [17..18]
 r113: [12..13]
 r114: [4..5]
 r116: [45..46]
 r117: [30..31]
 r118: [15..16]
Compressing live ranges: from 59 to 56 - 94%
Ranges after the compression:
 r87: [50..51]
 r88: [48..49]
 r89: [34..41]
 r90: [38..39]
 r91: [36..37]
 r92: [34..35]
 r93: [20..27]
 r94: [24..25]
 r95: [22..23]
 r96: [20..21]
 r97: [6..13]
 r98: [10..11]
 r99: [8..9]
 r100: [6..7]
 r101: [2..3]
 r102: [0..1]
 r103: [54..55]
 r104: [52..53]
 r105: [46..47]
 r106: [44..45]
 r107: [40..41]
 r108: [32..33]
 r109: [30..31]
 r110: [26..27]
 r111: [18..19]
 r112: [16..17]
 r113: [12..13]
 r114: [4..5]
 r116: [42..43]
 r117: [28..29]
 r118: [14..15]

********** Assignment #1: **********

	 Assigning to 116 (cl=GENERAL_REGS, orig=89, freq=3, tfirst=116, tfreq=3)...
	   Assign 0 to reload r116 (freq=3)
	 Assigning to 117 (cl=GENERAL_REGS, orig=93, freq=3, tfirst=117, tfreq=3)...
	   Assign 0 to reload r117 (freq=3)
	 Assigning to 118 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=118, tfreq=3)...
	   Assign 0 to reload r118 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 36
changing reg in insn 39
changing reg in insn 39
changing reg in insn 43
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
starting the processing of deferred insns
ending the processing of deferred insns


uint32_t GlobalDescriptorTable::SegmentDescriptor::GetBase()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 17[flags]
;;  ref usage 	r0={33d,33u} r1={4d,3u} r2={1d} r6={1d,16u} r7={1d,2u} r17={10d} r20={1d,1u,7e} 
;;    total ref usage 113{51d,55u,7e} in 41{41 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:67 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
        (reg/f:SI 0 ax [103])) gdt.cpp:67 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:69 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:SI 0 ax [orig:87 D.1290 ] [87])
                (plus:SI (reg/f:SI 0 ax [104])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:69 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 7 [0x7]))
        (nil)))
(insn 9 8 10 2 (set (reg:QI 0 ax [orig:88 D.1291 ] [88])
        (mem:QI (reg/f:SI 0 ax [orig:87 D.1290 ] [87]) [0 *_3+0 S1 A8])) gdt.cpp:69 93 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [105])
        (zero_extend:SI (reg:QI 0 ax [orig:88 D.1291 ] [88]))) gdt.cpp:69 138 {*zero_extendqisi2}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 0 ax [105])) gdt.cpp:69 90 {*movsi_internal}
     (nil))
(insn 12 11 47 2 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:70 90 {*movsi_internal}
     (nil))
(insn 47 12 13 2 (set (reg:SI 0 ax [orig:89 D.1292 ] [89])
        (reg:SI 0 ax [106])) gdt.cpp:70 90 {*movsi_internal}
     (nil))
(insn 13 47 48 2 (parallel [
            (set (reg:SI 0 ax [orig:89 D.1292 ] [89])
                (ashift:SI (reg:SI 0 ax [orig:89 D.1292 ] [89])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:70 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 48 13 14 2 (set (reg:SI 1 dx [orig:89 D.1292 ] [89])
        (reg:SI 0 ax [orig:89 D.1292 ] [89])) gdt.cpp:70 90 {*movsi_internal}
     (nil))
(insn 14 48 15 2 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:70 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:SI 0 ax [orig:90 D.1290 ] [90])
                (plus:SI (reg/f:SI 0 ax [107])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:70 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 4 [0x4]))
        (nil)))
(insn 16 15 17 2 (set (reg:QI 0 ax [orig:91 D.1291 ] [91])
        (mem:QI (reg/f:SI 0 ax [orig:90 D.1290 ] [90]) [0 *_8+0 S1 A8])) gdt.cpp:70 93 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 0 ax [orig:92 D.1292 ] [92])
        (zero_extend:SI (reg:QI 0 ax [orig:91 D.1291 ] [91]))) gdt.cpp:70 138 {*zero_extendqisi2}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg:SI 0 ax [108])
                (plus:SI (reg:SI 0 ax [orig:92 D.1292 ] [92])
                    (reg:SI 1 dx [orig:89 D.1292 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:70 217 {*addsi_1}
     (nil))
(insn 19 18 20 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 0 ax [108])) gdt.cpp:70 90 {*movsi_internal}
     (nil))
(insn 20 19 49 2 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:71 90 {*movsi_internal}
     (nil))
(insn 49 20 21 2 (set (reg:SI 0 ax [orig:93 D.1292 ] [93])
        (reg:SI 0 ax [109])) gdt.cpp:71 90 {*movsi_internal}
     (nil))
(insn 21 49 50 2 (parallel [
            (set (reg:SI 0 ax [orig:93 D.1292 ] [93])
                (ashift:SI (reg:SI 0 ax [orig:93 D.1292 ] [93])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:71 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 50 21 22 2 (set (reg:SI 1 dx [orig:93 D.1292 ] [93])
        (reg:SI 0 ax [orig:93 D.1292 ] [93])) gdt.cpp:71 90 {*movsi_internal}
     (nil))
(insn 22 50 23 2 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:71 90 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg/f:SI 0 ax [orig:94 D.1290 ] [94])
                (plus:SI (reg/f:SI 0 ax [110])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:71 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 24 23 25 2 (set (reg:QI 0 ax [orig:95 D.1291 ] [95])
        (mem:QI (reg/f:SI 0 ax [orig:94 D.1290 ] [94]) [0 *_13+0 S1 A8])) gdt.cpp:71 93 {*movqi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [orig:96 D.1292 ] [96])
        (zero_extend:SI (reg:QI 0 ax [orig:95 D.1291 ] [95]))) gdt.cpp:71 138 {*zero_extendqisi2}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg:SI 0 ax [111])
                (plus:SI (reg:SI 0 ax [orig:96 D.1292 ] [96])
                    (reg:SI 1 dx [orig:93 D.1292 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:71 217 {*addsi_1}
     (nil))
(insn 27 26 28 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 0 ax [111])) gdt.cpp:71 90 {*movsi_internal}
     (nil))
(insn 28 27 51 2 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:72 90 {*movsi_internal}
     (nil))
(insn 51 28 29 2 (set (reg:SI 0 ax [orig:97 D.1292 ] [97])
        (reg:SI 0 ax [112])) gdt.cpp:72 90 {*movsi_internal}
     (nil))
(insn 29 51 52 2 (parallel [
            (set (reg:SI 0 ax [orig:97 D.1292 ] [97])
                (ashift:SI (reg:SI 0 ax [orig:97 D.1292 ] [97])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:72 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 52 29 30 2 (set (reg:SI 1 dx [orig:97 D.1292 ] [97])
        (reg:SI 0 ax [orig:97 D.1292 ] [97])) gdt.cpp:72 90 {*movsi_internal}
     (nil))
(insn 30 52 31 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:72 90 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (parallel [
            (set (reg/f:SI 0 ax [orig:98 D.1290 ] [98])
                (plus:SI (reg/f:SI 0 ax [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:72 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 32 31 33 2 (set (reg:QI 0 ax [orig:99 D.1291 ] [99])
        (mem:QI (reg/f:SI 0 ax [orig:98 D.1290 ] [98]) [0 *_18+0 S1 A8])) gdt.cpp:72 93 {*movqi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:SI 0 ax [orig:100 D.1292 ] [100])
        (zero_extend:SI (reg:QI 0 ax [orig:99 D.1291 ] [99]))) gdt.cpp:72 138 {*zero_extendqisi2}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg:SI 0 ax [114])
                (plus:SI (reg:SI 0 ax [orig:100 D.1292 ] [100])
                    (reg:SI 1 dx [orig:97 D.1292 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:72 217 {*addsi_1}
     (nil))
(insn 35 34 36 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 0 ax [114])) gdt.cpp:72 90 {*movsi_internal}
     (nil))
(insn 36 35 39 2 (set (reg:SI 0 ax [orig:101 D.1293 ] [101])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:73 90 {*movsi_internal}
     (nil))
(insn 39 36 43 2 (set (reg:SI 0 ax [orig:102 <retval> ] [102])
        (reg:SI 0 ax [orig:101 D.1293 ] [101])) gdt.cpp:73 90 {*movsi_internal}
     (nil))
(insn 43 39 44 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:102 <retval> ] [102])) gdt.cpp:74 90 {*movsi_internal}
     (nil))
(insn 44 43 46 2 (use (reg/i:SI 0 ax)) gdt.cpp:74 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 46 44 0 NOTE_INSN_DELETED)

;; Function uint32_t GlobalDescriptorTable::SegmentDescriptor::GetLimit() (_ZN21GlobalDescriptorTable17SegmentDescriptor8GetLimitEv, funcdef_no=12, decl_uid=1080, cgraph_uid=12, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=117 from oldreg=90, assigning class GENERAL_REGS to r117
   14: {r117:SI=r117:SI<<0x8;clobber flags:CC;}
      REG_DEAD r107:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x4]<<0x8
    Inserting insn reload before:
   53: r117:SI=r107:SI
    Inserting insn reload after:
   54: r90:SI=r117:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=118 from oldreg=94, assigning class GENERAL_REGS to r118
   22: {r118:SI=r118:SI<<0x8;clobber flags:CC;}
      REG_DEAD r110:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x4]<<0x8
    Inserting insn reload before:
   55: r118:SI=r110:SI
    Inserting insn reload after:
   56: r94:SI=r118:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 50: point = 0
   Insn 49: point = 0
   Insn 45: point = 1
   Insn 42: point = 3
  BB 3
   Insn 39: point = 4
   Insn 38: point = 5
   Insn 37: point = 7
   Insn 36: point = 9
  BB 2
   Insn 34: point = 10
   Insn 33: point = 10
   Insn 32: point = 11
   Insn 31: point = 13
   Insn 30: point = 15
   Insn 29: point = 17
   Insn 28: point = 19
   Insn 27: point = 20
   Insn 26: point = 21
   Insn 25: point = 23
   Insn 24: point = 25
   Insn 23: point = 27
   Insn 56: point = 28
	Hard reg 1 is preferable by r118 with profit 1
   Insn 22: point = 30
   Insn 55: point = 30
	Hard reg 1 is preferable by r118 with profit 1
	Hard reg 0 is preferable by r118 with profit 1
   Insn 21: point = 32
   Insn 20: point = 33
   Insn 19: point = 34
   Insn 18: point = 36
   Insn 17: point = 38
   Insn 16: point = 40
   Insn 15: point = 42
   Insn 54: point = 43
	Hard reg 1 is preferable by r117 with profit 1
   Insn 14: point = 45
   Insn 53: point = 45
	Hard reg 1 is preferable by r117 with profit 1
	Hard reg 0 is preferable by r117 with profit 1
   Insn 13: point = 47
   Insn 12: point = 48
   Insn 11: point = 49
   Insn 10: point = 51
   Insn 9: point = 53
   Insn 8: point = 55
   Insn 7: point = 57
   Insn 6: point = 58
   Insn 5: point = 59
 r87: [54..55]
 r88: [52..53]
 r89: [50..51]
 r90: [35..43]
 r91: [39..40]
 r92: [37..38]
 r93: [35..36]
 r94: [22..28]
 r95: [24..25]
 r96: [22..23]
 r97: [16..17]
 r98: [14..15]
 r99: [12..13]
 r100: [10..11]
 r101: [6..7]
 r102: [2..3]
 r103: [0..1]
 r104: [58..59]
 r105: [56..57]
 r106: [48..49]
 r107: [46..47]
 r108: [41..42]
 r109: [33..34]
 r110: [31..32]
 r111: [26..27]
 r112: [20..21]
 r113: [18..19]
 r114: [8..9]
 r115: [4..5]
 r117: [44..45]
 r118: [29..30]
Compressing live ranges: from 60 to 58 - 96%
Ranges after the compression:
 r87: [52..53]
 r88: [50..51]
 r89: [48..49]
 r90: [34..41]
 r91: [38..39]
 r92: [36..37]
 r93: [34..35]
 r94: [22..27]
 r95: [24..25]
 r96: [22..23]
 r97: [16..17]
 r98: [14..15]
 r99: [12..13]
 r100: [10..11]
 r101: [6..7]
 r102: [2..3]
 r103: [0..1]
 r104: [56..57]
 r105: [54..55]
 r106: [46..47]
 r107: [44..45]
 r108: [40..41]
 r109: [32..33]
 r110: [30..31]
 r111: [26..27]
 r112: [20..21]
 r113: [18..19]
 r114: [8..9]
 r115: [4..5]
 r117: [42..43]
 r118: [28..29]

********** Assignment #1: **********

	 Assigning to 117 (cl=GENERAL_REGS, orig=90, freq=3, tfirst=117, tfreq=3)...
	   Assign 0 to reload r117 (freq=3)
	 Assigning to 118 (cl=GENERAL_REGS, orig=94, freq=3, tfirst=118, tfreq=3)...
	   Assign 0 to reload r118 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 45
changing reg in insn 45
changing reg in insn 49
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
starting the processing of deferred insns
ending the processing of deferred insns


uint32_t GlobalDescriptorTable::SegmentDescriptor::GetLimit()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 17[flags]
;;  ref usage 	r0={33d,33u} r1={3d,2u} r2={1d} r6={1d,18u} r7={1d,4u} r17={12d,1u} r20={1d,1u,6e} 
;;    total ref usage 117{52d,59u,6e} in 42{42 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 104 105 106 107 108 109 110 111 112 113
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) gdt.cpp:78 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
        (reg/f:SI 0 ax [104])) gdt.cpp:78 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:79 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:SI 0 ax [orig:87 D.1294 ] [87])
                (plus:SI (reg/f:SI 0 ax [105])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:79 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
            (const_int 6 [0x6]))
        (nil)))
(insn 9 8 10 2 (set (reg:QI 0 ax [orig:88 D.1295 ] [88])
        (mem:QI (reg/f:SI 0 ax [orig:87 D.1294 ] [87]) [0 *_4+0 S1 A8])) gdt.cpp:79 93 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:89 D.1296 ] [89])
        (zero_extend:SI (reg:QI 0 ax [orig:88 D.1295 ] [88]))) gdt.cpp:79 138 {*zero_extendqisi2}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 0 ax [106])
                (and:SI (reg:SI 0 ax [orig:89 D.1296 ] [89])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:79 381 {*andsi_1}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 0 ax [106])) gdt.cpp:79 90 {*movsi_internal}
     (nil))
(insn 13 12 53 2 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:80 90 {*movsi_internal}
     (nil))
(insn 53 13 14 2 (set (reg:SI 0 ax [orig:90 D.1296 ] [90])
        (reg:SI 0 ax [107])) gdt.cpp:80 90 {*movsi_internal}
     (nil))
(insn 14 53 54 2 (parallel [
            (set (reg:SI 0 ax [orig:90 D.1296 ] [90])
                (ashift:SI (reg:SI 0 ax [orig:90 D.1296 ] [90])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:80 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 54 14 15 2 (set (reg:SI 1 dx [orig:90 D.1296 ] [90])
        (reg:SI 0 ax [orig:90 D.1296 ] [90])) gdt.cpp:80 90 {*movsi_internal}
     (nil))
(insn 15 54 16 2 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:80 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg/f:SI 0 ax [orig:91 D.1294 ] [91])
                (plus:SI (reg/f:SI 0 ax [108])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:80 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 17 16 18 2 (set (reg:QI 0 ax [orig:92 D.1295 ] [92])
        (mem:QI (reg/f:SI 0 ax [orig:91 D.1294 ] [91]) [0 *_10+0 S1 A8])) gdt.cpp:80 93 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [orig:93 D.1296 ] [93])
        (zero_extend:SI (reg:QI 0 ax [orig:92 D.1295 ] [92]))) gdt.cpp:80 138 {*zero_extendqisi2}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [109])
                (plus:SI (reg:SI 0 ax [orig:93 D.1296 ] [93])
                    (reg:SI 1 dx [orig:90 D.1296 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:80 217 {*addsi_1}
     (nil))
(insn 20 19 21 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 0 ax [109])) gdt.cpp:80 90 {*movsi_internal}
     (nil))
(insn 21 20 55 2 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:81 90 {*movsi_internal}
     (nil))
(insn 55 21 22 2 (set (reg:SI 0 ax [orig:94 D.1296 ] [94])
        (reg:SI 0 ax [110])) gdt.cpp:81 90 {*movsi_internal}
     (nil))
(insn 22 55 56 2 (parallel [
            (set (reg:SI 0 ax [orig:94 D.1296 ] [94])
                (ashift:SI (reg:SI 0 ax [orig:94 D.1296 ] [94])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:81 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 56 22 23 2 (set (reg:SI 1 dx [orig:94 D.1296 ] [94])
        (reg:SI 0 ax [orig:94 D.1296 ] [94])) gdt.cpp:81 90 {*movsi_internal}
     (nil))
(insn 23 56 24 2 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:81 90 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:QI 0 ax [orig:95 D.1295 ] [95])
        (mem:QI (reg/f:SI 0 ax [111]) [0 *target_3+0 S1 A8])) gdt.cpp:81 93 {*movqi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [orig:96 D.1296 ] [96])
        (zero_extend:SI (reg:QI 0 ax [orig:95 D.1295 ] [95]))) gdt.cpp:81 138 {*zero_extendqisi2}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg:SI 0 ax [112])
                (plus:SI (reg:SI 0 ax [orig:96 D.1296 ] [96])
                    (reg:SI 1 dx [orig:94 D.1296 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:81 217 {*addsi_1}
     (nil))
(insn 27 26 28 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 0 ax [112])) gdt.cpp:81 90 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:82 90 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:SI 0 ax [orig:97 D.1294 ] [97])
                (plus:SI (reg/f:SI 0 ax [113])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:82 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
            (const_int 6 [0x6]))
        (nil)))
(insn 30 29 31 2 (set (reg:QI 0 ax [orig:98 D.1295 ] [98])
        (mem:QI (reg/f:SI 0 ax [orig:97 D.1294 ] [97]) [0 *_18+0 S1 A8])) gdt.cpp:82 93 {*movqi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:99 D.1297 ] [99])
        (zero_extend:SI (reg:QI 0 ax [orig:98 D.1295 ] [98]))) gdt.cpp:82 138 {*zero_extendqisi2}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:SI 0 ax [orig:100 D.1297 ] [100])
                (and:SI (reg:SI 0 ax [orig:99 D.1297 ] [99])
                    (const_int 192 [0xc0])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:82 381 {*andsi_1}
     (nil))
(insn 33 32 34 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 D.1297 ] [100])
            (const_int 192 [0xc0]))) gdt.cpp:82 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) gdt.cpp:82 612 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 114 115
(note 35 34 36 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 3 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:83 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg:SI 0 ax [orig:101 D.1296 ] [101])
                (ashift:SI (reg:SI 0 ax [114])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:83 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
            (const_int 12 [0xc]))
        (nil)))
(insn 38 37 39 3 (parallel [
            (set (reg:SI 0 ax [115])
                (ior:SI (reg:SI 0 ax [orig:101 D.1296 ] [101])
                    (const_int 4095 [0xfff])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:83 399 {*iorsi_1}
     (nil))
(insn 39 38 40 3 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 0 ax [115])) gdt.cpp:83 90 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 102 103
(code_label 40 39 41 4 15 "" [1 uses])
(note 41 40 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 45 4 (set (reg:SI 0 ax [orig:102 D.1298 ] [102])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:84 90 {*movsi_internal}
     (nil))
(insn 45 42 49 4 (set (reg:SI 0 ax [orig:103 <retval> ] [103])
        (reg:SI 0 ax [orig:102 D.1298 ] [102])) gdt.cpp:84 90 {*movsi_internal}
     (nil))
(insn 49 45 50 4 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:103 <retval> ] [103])) gdt.cpp:85 90 {*movsi_internal}
     (nil))
(insn 50 49 52 4 (use (reg/i:SI 0 ax)) gdt.cpp:85 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 52 50 0 NOTE_INSN_DELETED)
