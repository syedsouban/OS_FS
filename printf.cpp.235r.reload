
;; Function void printf(char*) (_Z6printfPc, funcdef_no=0, decl_uid=1063, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-4, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 9
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 16
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 42:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=15,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 65:  (0) =rm  (1) %0  (2) rn {*andhi_1}
      Creating newreg=173 from oldreg=118, assigning class GENERAL_REGS to r173
   65: {r173:HI=r173:HI&0xffffffffffffff00;clobber flags:CC;}
      REG_DEAD r117:HI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  185: r173:HI=r117:HI
    Inserting insn reload after:
  186: r118:HI=r173:HI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =*a  (1) *0 {extendqihi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=600
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) <g> {*iorhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) rm  (1) rn {*cmphi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) rm  (1) rn {*cmphi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rm  (1) rn {*cmphi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 101:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 106:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 114:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 129:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 134
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 135:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 137:  (0) =rm  (1) %0  (2) rn {*andhi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) <g> {*iorhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 149:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 161:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 20
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 19
EBB 18

********** Pseudo live ranges #1: **********

  BB 18
  BB 19
   Insn 181: point = 0
  BB 3
   Insn 12: point = 0
   Insn 11: point = 0
   Insn 10: point = 1
   Insn 9: point = 3
   Insn 8: point = 5
   Insn 7: point = 6
  BB 17
   Insn 177: point = 7
   Insn 161: point = 7
  BB 16
   Insn 158: point = 7
   Insn 157: point = 7
  BB 11
   Insn 97: point = 7
   Insn 96: point = 7
   Insn 95: point = 8
  BB 15
   Insn 175: point = 9
   Insn 151: point = 9
   Insn 150: point = 10
   Insn 149: point = 12
  BB 13
   Insn 103: point = 13
   Insn 102: point = 13
   Insn 101: point = 14
  BB 14
   Insn 173: point = 15
   Insn 143: point = 15
   Insn 142: point = 16
   Insn 141: point = 18
   Insn 140: point = 19
   Insn 139: point = 20
   Insn 138: point = 22
   Insn 137: point = 24
   Insn 136: point = 26
   Insn 135: point = 28
   Insn 134: point = 30
   Insn 133: point = 32
   Insn 132: point = 34
   Insn 131: point = 36
   Insn 130: point = 38
   Insn 129: point = 40
   Insn 128: point = 41
   Insn 127: point = 43
   Insn 126: point = 45
   Insn 125: point = 47
   Insn 124: point = 48
   Insn 123: point = 48
   Insn 122: point = 49
   Insn 121: point = 51
   Insn 120: point = 52
   Insn 119: point = 53
   Insn 118: point = 55
   Insn 117: point = 57
   Insn 116: point = 59
   Insn 115: point = 61
   Insn 114: point = 63
   Insn 113: point = 64
   Insn 112: point = 66
   Insn 111: point = 68
   Insn 110: point = 70
   Insn 109: point = 71
   Insn 108: point = 71
   Insn 107: point = 72
   Insn 106: point = 74
   Insn 105: point = 75
  BB 12
   Insn 99: point = 76
  BB 10
   Insn 93: point = 76
  BB 9
   Insn 91: point = 76
   Insn 90: point = 76
   Insn 89: point = 77
  BB 8
   Insn 86: point = 78
   Insn 85: point = 79
   Insn 84: point = 81
   Insn 83: point = 82
  BB 7
   Insn 81: point = 82
   Insn 80: point = 82
   Insn 79: point = 83
  BB 5
   Insn 171: point = 84
   Insn 28: point = 84
   Insn 27: point = 85
   Insn 26: point = 87
   Insn 25: point = 88
  BB 20
   Insn 183: point = 88
  BB 6
   Insn 76: point = 88
   Insn 75: point = 89
   Insn 74: point = 91
   Insn 73: point = 92
   Insn 72: point = 93
   Insn 71: point = 95
   Insn 70: point = 97
   Insn 69: point = 99
   Insn 68: point = 101
   Insn 67: point = 103
   Insn 66: point = 104
   Insn 186: point = 105
	Hard reg 3 is preferable by r173 with profit 1
   Insn 65: point = 107
   Insn 185: point = 107
	Hard reg 3 is preferable by r173 with profit 1
	Hard reg 0 is preferable by r173 with profit 1
   Insn 64: point = 109
   Insn 63: point = 111
   Insn 62: point = 113
   Insn 61: point = 115
   Insn 60: point = 117
   Insn 59: point = 119
   Insn 58: point = 121
   Insn 57: point = 123
   Insn 56: point = 124
   Insn 55: point = 126
   Insn 54: point = 128
   Insn 53: point = 130
   Insn 52: point = 131
   Insn 51: point = 131
   Insn 50: point = 132
   Insn 49: point = 134
   Insn 48: point = 135
   Insn 47: point = 136
   Insn 46: point = 138
   Insn 45: point = 140
   Insn 44: point = 142
   Insn 43: point = 144
   Insn 42: point = 146
   Insn 41: point = 147
   Insn 40: point = 149
   Insn 39: point = 151
   Insn 38: point = 153
   Insn 37: point = 154
   Insn 36: point = 154
   Insn 35: point = 155
   Insn 34: point = 157
   Insn 33: point = 158
  BB 4
   Insn 20: point = 159
   Insn 19: point = 159
   Insn 18: point = 160
   Insn 17: point = 162
   Insn 16: point = 164
   Insn 15: point = 166
   Insn 14: point = 167
  BB 2
   Insn 5: point = 168
 r87: [4..6]
 r88: [2..3]
 r89: [0..1]
 r90: [165..167]
 r91: [163..164]
 r92: [161..162]
 r93: [159..160]
 r94: [86..87]
 r95: [84..85]
 r96: [137..158]
 r97: [156..157]
 r98: [153..155]
 r99: [143..147]
 r100: [145..146]
 r101: [143..144]
 r102: [141..142]
 r103: [139..140]
 r104: [137..138]
 r105: [92..136]
 r106: [114..135]
 r107: [133..134]
 r108: [130..132]
 r109: [120..124]
 r110: [122..123]
 r111: [120..121]
 r112: [118..119]
 r113: [116..117]
 r114: [114..115]
 r115: [112..113]
 r116: [110..111]
 r117: [108..109]
 r118: [96..105]
 r119: [102..104]
 r120: [100..101]
 r121: [98..99]
 r122: [96..97]
 r123: [94..95]
 r124: [92..93]
 r125: [90..91]
 r126: [88..89]
 r127: [82..83]
 r128: [80..81]
 r129: [78..79]
 r130: [76..77]
 r131: [7..8]
 r132: [13..14]
 r133: [54..75]
 r134: [73..74]
 r135: [70..72]
 r136: [60..64]
 r137: [62..63]
 r138: [60..61]
 r139: [58..59]
 r140: [56..57]
 r141: [54..55]
 r142: [19..53]
 r143: [31..52]
 r144: [50..51]
 r145: [47..49]
 r146: [37..41]
 r147: [39..40]
 r148: [37..38]
 r149: [35..36]
 r150: [33..34]
 r151: [31..32]
 r152: [29..30]
 r153: [27..28]
 r154: [25..26]
 r155: [23..24]
 r156: [21..22]
 r157: [19..20]
 r158: [17..18]
 r159: [15..16]
 r160: [11..12]
 r161: [9..10]
 r162: [4..5]
 r163: [165..166]
 r164: [152..154] [148..149]
 r165: [150..151]
 r166: [129..131] [125..126]
 r167: [127..128]
 r168: [102..103]
 r169: [69..71] [65..66]
 r170: [67..68]
 r171: [46..48] [42..43]
 r172: [44..45]
 r173: [106..107]
Compressing live ranges: from 168 to 146 - 86%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [144..145]
 r91: [142..143]
 r92: [140..141]
 r93: [138..139]
 r94: [76..77]
 r95: [74..75]
 r96: [120..137]
 r97: [136..137]
 r98: [134..135]
 r99: [126..129]
 r100: [128..129]
 r101: [126..127]
 r102: [124..125]
 r103: [122..123]
 r104: [120..121]
 r105: [82..119]
 r106: [102..119]
 r107: [118..119]
 r108: [116..117]
 r109: [108..111]
 r110: [110..111]
 r111: [108..109]
 r112: [106..107]
 r113: [104..105]
 r114: [102..103]
 r115: [100..101]
 r116: [98..99]
 r117: [96..97]
 r118: [86..93]
 r119: [92..93]
 r120: [90..91]
 r121: [88..89]
 r122: [86..87]
 r123: [84..85]
 r124: [82..83]
 r125: [80..81]
 r126: [78..79]
 r127: [72..73]
 r128: [70..71]
 r129: [68..69]
 r130: [66..67]
 r131: [6..7]
 r132: [12..13]
 r133: [48..65]
 r134: [64..65]
 r135: [62..63]
 r136: [54..57]
 r137: [56..57]
 r138: [54..55]
 r139: [52..53]
 r140: [50..51]
 r141: [48..49]
 r142: [18..47]
 r143: [30..47]
 r144: [46..47]
 r145: [44..45]
 r146: [36..39]
 r147: [38..39]
 r148: [36..37]
 r149: [34..35]
 r150: [32..33]
 r151: [30..31]
 r152: [28..29]
 r153: [26..27]
 r154: [24..25]
 r155: [22..23]
 r156: [20..21]
 r157: [18..19]
 r158: [16..17]
 r159: [14..15]
 r160: [10..11]
 r161: [8..9]
 r162: [4..5]
 r163: [144..145]
 r164: [134..135] [130..131]
 r165: [132..133]
 r166: [116..117] [112..113]
 r167: [114..115]
 r168: [92..93]
 r169: [62..63] [58..59]
 r170: [60..61]
 r171: [44..45] [40..41]
 r172: [42..43]
 r173: [94..95]

********** Assignment #1: **********

	 Assigning to 173 (cl=GENERAL_REGS, orig=118, freq=3, tfirst=173, tfreq=3)...
	   Assign 0 to reload r173 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-4, prev_offset=-4)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 47
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 38
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 73
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 53
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 119
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 110
changing reg in insn 108
changing reg in insn 110
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 140
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 125
changing reg in insn 123
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 8
changing reg in insn 15
changing reg in insn 40
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 41
changing reg in insn 39
changing reg in insn 38
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 55
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 56
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 67
changing reg in insn 112
changing reg in insn 110
changing reg in insn 109
changing reg in insn 108
changing reg in insn 113
changing reg in insn 111
changing reg in insn 110
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 127
changing reg in insn 125
changing reg in insn 124
changing reg in insn 123
changing reg in insn 128
changing reg in insn 126
changing reg in insn 125
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
deleting insn with uid = 40.
deleting insn with uid = 45.
deleting insn with uid = 55.
deleting insn with uid = 60.
deleting insn with uid = 64.
deleting insn with uid = 185.
deleting insn with uid = 72.
deleting insn with uid = 112.
deleting insn with uid = 117.
deleting insn with uid = 127.
deleting insn with uid = 132.
deleting insn with uid = 136.
deleting insn with uid = 139.
starting the processing of deferred insns
ending the processing of deferred insns


void printf(char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 6[bp] 17[flags]
;;  ref usage 	r0={70d,69u} r1={12d,15u,7e} r2={5d,4u} r3={3d,3u} r6={1d,29u} r7={1d,20u} r16={3e} r17={43d,6u} r20={1d,1u} 
;;    total ref usage 293{136d,147u,10e} in 120{120 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 162 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) printf.cpp:15 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              17 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 162
(code_label 162 5 6 3 12 "" [1 uses])
(note 6 162 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 6 8 3 (set (reg:SI 1 dx [orig:87 D.1174 ] [87])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) printf.cpp:15 90 {*movsi_internal}
     (nil))
(insn 8 7 9 3 (set (reg/f:SI 0 ax [162])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 str+0 S4 A32])) printf.cpp:15 90 {*movsi_internal}
     (nil))
(insn 9 8 10 3 (parallel [
            (set (reg/f:SI 0 ax [orig:88 D.1175 ] [88])
                (plus:SI (reg/f:SI 0 ax [162])
                    (reg:SI 1 dx [orig:87 D.1174 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:15 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 str+0 S4 A32])
            (reg:SI 1 dx [orig:87 D.1174 ] [87]))
        (nil)))
(insn 10 9 11 3 (set (reg:QI 0 ax [orig:89 D.1176 ] [89])
        (mem:QI (reg/f:SI 0 ax [orig:88 D.1175 ] [88]) [0 *_12+0 S1 A8])) printf.cpp:15 93 {*movqi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.1176 ] [89])
            (const_int 0 [0]))) printf.cpp:15 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 180)
            (pc))) printf.cpp:15 612 {*jcc_1}
     (nil)
 -> 180)
;;  succ:       19
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 163
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:SI 1 dx [orig:90 D.1174 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) printf.cpp:17 90 {*movsi_internal}
     (nil))
(insn 15 14 16 4 (set (reg/f:SI 0 ax [163])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 str+0 S4 A32])) printf.cpp:17 90 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg/f:SI 0 ax [orig:91 D.1175 ] [91])
                (plus:SI (reg/f:SI 0 ax [163])
                    (reg:SI 1 dx [orig:90 D.1174 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:17 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 str+0 S4 A32])
            (reg:SI 1 dx [orig:90 D.1174 ] [90]))
        (nil)))
(insn 17 16 18 4 (set (reg:QI 0 ax [orig:92 D.1176 ] [92])
        (mem:QI (reg/f:SI 0 ax [orig:91 D.1175 ] [91]) [0 *_15+0 S1 A8])) printf.cpp:17 93 {*movqi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:SI 0 ax [orig:93 D.1177 ] [93])
        (sign_extend:SI (reg:QI 0 ax [orig:92 D.1176 ] [92]))) printf.cpp:17 148 {extendqisi2}
     (nil))
(insn 19 18 20 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 D.1177 ] [93])
            (const_int 10 [0xa]))) printf.cpp:17 7 {*cmpsi_1}
     (nil))
(jump_insn 20 19 24 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 170)
            (pc))) printf.cpp:17 612 {*jcc_1}
     (nil)
 -> 170)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95
(note 24 20 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])
        (const_int 0 [0])) printf.cpp:20 92 {*movhi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:HI 0 ax [orig:94 D.1178 ] [94])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:21 92 {*movhi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:HI 0 ax [orig:95 D.1178 ] [95])
                (plus:HI (reg:HI 0 ax [orig:94 D.1178 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:21 220 {*addhi_1}
     (nil))
(insn 28 27 171 5 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])
        (reg:HI 0 ax [orig:95 D.1178 ] [95])) printf.cpp:21 92 {*movhi_internal}
     (nil))
(jump_insn 171 28 172 5 (set (pc)
        (label_ref 77)) printf.cpp:22 654 {jump}
     (nil)
 -> 77)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 172 171 170)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 164 165 166 167 168
(code_label 170 172 32 6 13 "" [1 uses])
(note 32 170 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg/f:SI 2 cx [orig:96 D.1179 ] [96])
        (mem/f/c:SI (symbol_ref:SI ("_ZZ6printfPcE11VideoMemory") [flags 0x2]  <var_decl 0x7f80af469bd0 VideoMemory>) [0 VideoMemory+0 S4 A32])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:HI 0 ax [orig:97 D.1178 ] [97])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:24 92 {*movhi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:SI 1 dx [orig:98 D.1177 ] [98])
        (zero_extend:SI (reg:HI 0 ax [orig:97 D.1178 ] [97]))) printf.cpp:24 139 {*zero_extendhisi2}
     (nil))
(insn 36 35 37 6 (set (reg:SI 0 ax [164])
        (reg:SI 1 dx [orig:98 D.1177 ] [98])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg:SI 0 ax [164])
                (ashift:SI (reg:SI 0 ax [164])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 511 {*ashlsi3_1}
     (nil))
(insn 38 37 39 6 (parallel [
            (set (reg:SI 0 ax [164])
                (plus:SI (reg:SI 0 ax [164])
                    (reg:SI 1 dx [orig:98 D.1177 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 217 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:98 D.1177 ] [98])
            (const_int 5 [0x5]))
        (nil)))
(insn 39 38 41 6 (parallel [
            (set (reg:SI 0 ax [165])
                (ashift:SI (reg:SI 0 ax [164])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 511 {*ashlsi3_1}
     (nil))
(insn 41 39 42 6 (set (reg:SI 1 dx [orig:99 D.1177 ] [99])
        (reg:SI 0 ax [164])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:HI 0 ax [orig:100 D.1178 ] [100])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:24 92 {*movhi_internal}
     (nil))
(insn 43 42 44 6 (set (reg:SI 0 ax [orig:101 D.1177 ] [101])
        (zero_extend:SI (reg:HI 0 ax [orig:100 D.1178 ] [100]))) printf.cpp:24 139 {*zero_extendhisi2}
     (nil))
(insn 44 43 46 6 (parallel [
            (set (reg:SI 0 ax [orig:102 D.1177 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 D.1177 ] [101])
                    (reg:SI 1 dx [orig:99 D.1177 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 217 {*addsi_1}
     (nil))
(insn 46 44 47 6 (parallel [
            (set (reg:SI 0 ax [orig:104 D.1180 ] [104])
                (ashift:SI (reg:SI 0 ax [orig:103 D.1180 ] [103])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 511 {*ashlsi3_1}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg/f:SI 2 cx [orig:105 D.1179 ] [105])
                (plus:SI (reg/f:SI 2 cx [orig:96 D.1179 ] [96])
                    (reg:SI 0 ax [orig:104 D.1180 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 217 {*addsi_1}
     (nil))
(insn 48 47 49 6 (set (reg/f:SI 3 bx [orig:106 D.1179 ] [106])
        (mem/f/c:SI (symbol_ref:SI ("_ZZ6printfPcE11VideoMemory") [flags 0x2]  <var_decl 0x7f80af469bd0 VideoMemory>) [0 VideoMemory+0 S4 A32])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:HI 0 ax [orig:107 D.1178 ] [107])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:24 92 {*movhi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:SI 1 dx [orig:108 D.1177 ] [108])
        (zero_extend:SI (reg:HI 0 ax [orig:107 D.1178 ] [107]))) printf.cpp:24 139 {*zero_extendhisi2}
     (nil))
(insn 51 50 52 6 (set (reg:SI 0 ax [166])
        (reg:SI 1 dx [orig:108 D.1177 ] [108])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (parallel [
            (set (reg:SI 0 ax [166])
                (ashift:SI (reg:SI 0 ax [166])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 511 {*ashlsi3_1}
     (nil))
(insn 53 52 54 6 (parallel [
            (set (reg:SI 0 ax [166])
                (plus:SI (reg:SI 0 ax [166])
                    (reg:SI 1 dx [orig:108 D.1177 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 217 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:108 D.1177 ] [108])
            (const_int 5 [0x5]))
        (nil)))
(insn 54 53 56 6 (parallel [
            (set (reg:SI 0 ax [167])
                (ashift:SI (reg:SI 0 ax [166])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 511 {*ashlsi3_1}
     (nil))
(insn 56 54 57 6 (set (reg:SI 1 dx [orig:109 D.1177 ] [109])
        (reg:SI 0 ax [166])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:HI 0 ax [orig:110 D.1178 ] [110])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:24 92 {*movhi_internal}
     (nil))
(insn 58 57 59 6 (set (reg:SI 0 ax [orig:111 D.1177 ] [111])
        (zero_extend:SI (reg:HI 0 ax [orig:110 D.1178 ] [110]))) printf.cpp:24 139 {*zero_extendhisi2}
     (nil))
(insn 59 58 61 6 (parallel [
            (set (reg:SI 0 ax [orig:112 D.1177 ] [112])
                (plus:SI (reg:SI 0 ax [orig:111 D.1177 ] [111])
                    (reg:SI 1 dx [orig:109 D.1177 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 217 {*addsi_1}
     (nil))
(insn 61 59 62 6 (parallel [
            (set (reg:SI 0 ax [orig:114 D.1180 ] [114])
                (ashift:SI (reg:SI 0 ax [orig:113 D.1180 ] [113])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 511 {*ashlsi3_1}
     (nil))
(insn 62 61 63 6 (parallel [
            (set (reg/f:SI 0 ax [orig:115 D.1179 ] [115])
                (plus:SI (reg:SI 0 ax [orig:114 D.1180 ] [114])
                    (reg/f:SI 3 bx [orig:106 D.1179 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 217 {*addsi_1}
     (nil))
(insn 63 62 65 6 (set (reg:HI 0 ax [orig:116 D.1178 ] [116])
        (mem:HI (reg/f:SI 0 ax [orig:115 D.1179 ] [115]) [0 *_42+0 S2 A16])) printf.cpp:24 92 {*movhi_internal}
     (nil))
(insn 65 63 186 6 (parallel [
            (set (reg:HI 0 ax [orig:118 D.1181 ] [118])
                (and:HI (reg:HI 0 ax [orig:118 D.1181 ] [118])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 383 {*andhi_1}
     (nil))
(insn 186 65 66 6 (set (reg:HI 3 bx [orig:118 D.1181 ] [118])
        (reg:HI 0 ax [orig:118 D.1181 ] [118])) printf.cpp:24 92 {*movhi_internal}
     (nil))
(insn 66 186 67 6 (set (reg:SI 1 dx [orig:119 D.1174 ] [119])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 67 66 68 6 (set (reg/f:SI 0 ax [168])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 str+0 S4 A32])) printf.cpp:24 90 {*movsi_internal}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg/f:SI 0 ax [orig:120 D.1175 ] [120])
                (plus:SI (reg/f:SI 0 ax [168])
                    (reg:SI 1 dx [orig:119 D.1174 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 str+0 S4 A32])
            (reg:SI 1 dx [orig:119 D.1174 ] [119]))
        (nil)))
(insn 69 68 70 6 (set (reg:QI 0 ax [orig:121 D.1176 ] [121])
        (mem:QI (reg/f:SI 0 ax [orig:120 D.1175 ] [120]) [0 *_47+0 S1 A8])) printf.cpp:24 93 {*movqi_internal}
     (nil))
(insn 70 69 71 6 (set (reg:HI 0 ax [orig:122 D.1181 ] [122])
        (sign_extend:HI (reg:QI 0 ax [orig:121 D.1176 ] [121]))) printf.cpp:24 150 {extendqihi2}
     (nil))
(insn 71 70 73 6 (parallel [
            (set (reg:HI 0 ax [orig:123 D.1181 ] [123])
                (ior:HI (reg:HI 0 ax [orig:122 D.1181 ] [122])
                    (reg:HI 3 bx [orig:118 D.1181 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:24 403 {*iorhi_1}
     (nil))
(insn 73 71 74 6 (set (mem:HI (reg/f:SI 2 cx [orig:105 D.1179 ] [105]) [0 *_32+0 S2 A16])
        (reg:HI 0 ax [orig:124 D.1178 ] [124])) printf.cpp:24 92 {*movhi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:HI 0 ax [orig:125 D.1178 ] [125])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:25 92 {*movhi_internal}
     (nil))
(insn 75 74 76 6 (parallel [
            (set (reg:HI 0 ax [orig:126 D.1178 ] [126])
                (plus:HI (reg:HI 0 ax [orig:125 D.1178 ] [125])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:25 220 {*addhi_1}
     (nil))
(insn 76 75 182 6 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])
        (reg:HI 0 ax [orig:126 D.1178 ] [126])) printf.cpp:25 92 {*movhi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 7, flags: (NEW, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 182 76 183 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 77 20 (const_int 0 [0]) printf.cpp:26 684 {nop}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127
(code_label 77 183 78 7 5 "" [1 uses])
(note 78 77 79 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 7 (set (reg:HI 0 ax [orig:127 D.1178 ] [127])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:28 92 {*movhi_internal}
     (nil))
(insn 80 79 81 7 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:127 D.1178 ] [127])
            (const_int 79 [0x4f]))) printf.cpp:28 6 {*cmphi_1}
     (nil))
(jump_insn 81 80 82 7 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) printf.cpp:28 612 {*jcc_1}
     (nil)
 -> 87)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129
(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 8 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])
        (const_int 0 [0])) printf.cpp:30 92 {*movhi_internal}
     (nil))
(insn 84 83 85 8 (set (reg:HI 0 ax [orig:128 D.1178 ] [128])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:31 92 {*movhi_internal}
     (nil))
(insn 85 84 86 8 (parallel [
            (set (reg:HI 0 ax [orig:129 D.1178 ] [129])
                (plus:HI (reg:HI 0 ax [orig:128 D.1178 ] [128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:31 220 {*addhi_1}
     (nil))
(insn 86 85 87 8 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])
        (reg:HI 0 ax [orig:129 D.1178 ] [129])) printf.cpp:31 92 {*movhi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130
(code_label 87 86 88 9 6 "" [1 uses])
(note 88 87 89 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 9 (set (reg:HI 0 ax [orig:130 D.1178 ] [130])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:33 92 {*movhi_internal}
     (nil))
(insn 90 89 91 9 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:130 D.1178 ] [130])
            (const_int 24 [0x18]))) printf.cpp:33 6 {*cmphi_1}
     (nil))
(jump_insn 91 90 92 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) printf.cpp:33 612 {*jcc_1}
     (nil)
 -> 159)
;;  succ:       10 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 92 91 93 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 152 10 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])
        (const_int 0 [0])) printf.cpp:35 92 {*movhi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              15 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131
(code_label 152 93 94 11 11 "" [1 uses])
(note 94 152 95 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 11 (set (reg:HI 0 ax [orig:131 D.1178 ] [131])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:35 92 {*movhi_internal}
     (nil))
(insn 96 95 97 11 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:131 D.1178 ] [131])
            (const_int 24 [0x18]))) printf.cpp:35 6 {*cmphi_1}
     (nil))
(jump_insn 97 96 98 11 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 155)
            (pc))) printf.cpp:35 612 {*jcc_1}
     (nil)
 -> 155)
;;  succ:       16
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 98 97 99 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 144 12 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])
        (const_int 0 [0])) printf.cpp:36 92 {*movhi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              14 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132
(code_label 144 99 100 13 10 "" [1 uses])
(note 100 144 101 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 13 (set (reg:HI 0 ax [orig:132 D.1178 ] [132])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:36 92 {*movhi_internal}
     (nil))
(insn 102 101 103 13 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:132 D.1178 ] [132])
            (const_int 79 [0x4f]))) printf.cpp:36 6 {*cmphi_1}
     (nil))
(jump_insn 103 102 104 13 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 147)
            (pc))) printf.cpp:36 612 {*jcc_1}
     (nil)
 -> 147)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 169 170 171 172
(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 14 (set (reg/f:SI 2 cx [orig:133 D.1179 ] [133])
        (mem/f/c:SI (symbol_ref:SI ("_ZZ6printfPcE11VideoMemory") [flags 0x2]  <var_decl 0x7f80af469bd0 VideoMemory>) [0 VideoMemory+0 S4 A32])) printf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 106 105 107 14 (set (reg:HI 0 ax [orig:134 D.1178 ] [134])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:37 92 {*movhi_internal}
     (nil))
(insn 107 106 108 14 (set (reg:SI 1 dx [orig:135 D.1177 ] [135])
        (zero_extend:SI (reg:HI 0 ax [orig:134 D.1178 ] [134]))) printf.cpp:37 139 {*zero_extendhisi2}
     (nil))
(insn 108 107 109 14 (set (reg:SI 0 ax [169])
        (reg:SI 1 dx [orig:135 D.1177 ] [135])) printf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 109 108 110 14 (parallel [
            (set (reg:SI 0 ax [169])
                (ashift:SI (reg:SI 0 ax [169])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 511 {*ashlsi3_1}
     (nil))
(insn 110 109 111 14 (parallel [
            (set (reg:SI 0 ax [169])
                (plus:SI (reg:SI 0 ax [169])
                    (reg:SI 1 dx [orig:135 D.1177 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 217 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:135 D.1177 ] [135])
            (const_int 5 [0x5]))
        (nil)))
(insn 111 110 113 14 (parallel [
            (set (reg:SI 0 ax [170])
                (ashift:SI (reg:SI 0 ax [169])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 511 {*ashlsi3_1}
     (nil))
(insn 113 111 114 14 (set (reg:SI 1 dx [orig:136 D.1177 ] [136])
        (reg:SI 0 ax [169])) printf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 114 113 115 14 (set (reg:HI 0 ax [orig:137 D.1178 ] [137])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:37 92 {*movhi_internal}
     (nil))
(insn 115 114 116 14 (set (reg:SI 0 ax [orig:138 D.1177 ] [138])
        (zero_extend:SI (reg:HI 0 ax [orig:137 D.1178 ] [137]))) printf.cpp:37 139 {*zero_extendhisi2}
     (nil))
(insn 116 115 118 14 (parallel [
            (set (reg:SI 0 ax [orig:139 D.1177 ] [139])
                (plus:SI (reg:SI 0 ax [orig:138 D.1177 ] [138])
                    (reg:SI 1 dx [orig:136 D.1177 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 217 {*addsi_1}
     (nil))
(insn 118 116 119 14 (parallel [
            (set (reg:SI 0 ax [orig:141 D.1180 ] [141])
                (ashift:SI (reg:SI 0 ax [orig:140 D.1180 ] [140])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 511 {*ashlsi3_1}
     (nil))
(insn 119 118 120 14 (parallel [
            (set (reg/f:SI 2 cx [orig:142 D.1179 ] [142])
                (plus:SI (reg/f:SI 2 cx [orig:133 D.1179 ] [133])
                    (reg:SI 0 ax [orig:141 D.1180 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 217 {*addsi_1}
     (nil))
(insn 120 119 121 14 (set (reg/f:SI 3 bx [orig:143 D.1179 ] [143])
        (mem/f/c:SI (symbol_ref:SI ("_ZZ6printfPcE11VideoMemory") [flags 0x2]  <var_decl 0x7f80af469bd0 VideoMemory>) [0 VideoMemory+0 S4 A32])) printf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 121 120 122 14 (set (reg:HI 0 ax [orig:144 D.1178 ] [144])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:37 92 {*movhi_internal}
     (nil))
(insn 122 121 123 14 (set (reg:SI 1 dx [orig:145 D.1177 ] [145])
        (zero_extend:SI (reg:HI 0 ax [orig:144 D.1178 ] [144]))) printf.cpp:37 139 {*zero_extendhisi2}
     (nil))
(insn 123 122 124 14 (set (reg:SI 0 ax [171])
        (reg:SI 1 dx [orig:145 D.1177 ] [145])) printf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 124 123 125 14 (parallel [
            (set (reg:SI 0 ax [171])
                (ashift:SI (reg:SI 0 ax [171])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 511 {*ashlsi3_1}
     (nil))
(insn 125 124 126 14 (parallel [
            (set (reg:SI 0 ax [171])
                (plus:SI (reg:SI 0 ax [171])
                    (reg:SI 1 dx [orig:145 D.1177 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 217 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:145 D.1177 ] [145])
            (const_int 5 [0x5]))
        (nil)))
(insn 126 125 128 14 (parallel [
            (set (reg:SI 0 ax [172])
                (ashift:SI (reg:SI 0 ax [171])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 511 {*ashlsi3_1}
     (nil))
(insn 128 126 129 14 (set (reg:SI 1 dx [orig:146 D.1177 ] [146])
        (reg:SI 0 ax [171])) printf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 129 128 130 14 (set (reg:HI 0 ax [orig:147 D.1178 ] [147])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:37 92 {*movhi_internal}
     (nil))
(insn 130 129 131 14 (set (reg:SI 0 ax [orig:148 D.1177 ] [148])
        (zero_extend:SI (reg:HI 0 ax [orig:147 D.1178 ] [147]))) printf.cpp:37 139 {*zero_extendhisi2}
     (nil))
(insn 131 130 133 14 (parallel [
            (set (reg:SI 0 ax [orig:149 D.1177 ] [149])
                (plus:SI (reg:SI 0 ax [orig:148 D.1177 ] [148])
                    (reg:SI 1 dx [orig:146 D.1177 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 217 {*addsi_1}
     (nil))
(insn 133 131 134 14 (parallel [
            (set (reg:SI 0 ax [orig:151 D.1180 ] [151])
                (ashift:SI (reg:SI 0 ax [orig:150 D.1180 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 511 {*ashlsi3_1}
     (nil))
(insn 134 133 135 14 (parallel [
            (set (reg/f:SI 0 ax [orig:152 D.1179 ] [152])
                (plus:SI (reg:SI 0 ax [orig:151 D.1180 ] [151])
                    (reg/f:SI 3 bx [orig:143 D.1179 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 217 {*addsi_1}
     (nil))
(insn 135 134 137 14 (set (reg:HI 0 ax [orig:153 D.1178 ] [153])
        (mem:HI (reg/f:SI 0 ax [orig:152 D.1179 ] [152]) [0 *_87+0 S2 A16])) printf.cpp:37 92 {*movhi_internal}
     (nil))
(insn 137 135 138 14 (parallel [
            (set (reg:HI 0 ax [orig:155 D.1181 ] [155])
                (and:HI (reg:HI 0 ax [orig:154 D.1181 ] [154])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 383 {*andhi_1}
     (nil))
(insn 138 137 140 14 (parallel [
            (set (reg:HI 0 ax [orig:156 D.1181 ] [156])
                (ior:HI (reg:HI 0 ax [orig:155 D.1181 ] [155])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:37 403 {*iorhi_1}
     (nil))
(insn 140 138 141 14 (set (mem:HI (reg/f:SI 2 cx [orig:142 D.1179 ] [142]) [0 *_77+0 S2 A16])
        (reg:HI 0 ax [orig:157 D.1178 ] [157])) printf.cpp:37 92 {*movhi_internal}
     (nil))
(insn 141 140 142 14 (set (reg:HI 0 ax [orig:158 D.1178 ] [158])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])) printf.cpp:36 92 {*movhi_internal}
     (nil))
(insn 142 141 143 14 (parallel [
            (set (reg:HI 0 ax [orig:159 D.1178 ] [159])
                (plus:HI (reg:HI 0 ax [orig:158 D.1178 ] [158])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:36 220 {*addhi_1}
     (nil))
(insn 143 142 173 14 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])
        (reg:HI 0 ax [orig:159 D.1178 ] [159])) printf.cpp:36 92 {*movhi_internal}
     (nil))
(jump_insn 173 143 174 14 (set (pc)
        (label_ref 144)) printf.cpp:36 654 {jump}
     (nil)
 -> 144)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 174 173 147)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161
(code_label 147 174 148 15 9 "" [1 uses])
(note 148 147 149 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 150 15 (set (reg:HI 0 ax [orig:160 D.1178 ] [160])
        (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])) printf.cpp:35 92 {*movhi_internal}
     (nil))
(insn 150 149 151 15 (parallel [
            (set (reg:HI 0 ax [orig:161 D.1178 ] [161])
                (plus:HI (reg:HI 0 ax [orig:160 D.1178 ] [160])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:35 220 {*addhi_1}
     (nil))
(insn 151 150 175 15 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])
        (reg:HI 0 ax [orig:161 D.1178 ] [161])) printf.cpp:35 92 {*movhi_internal}
     (nil))
(jump_insn 175 151 176 15 (set (pc)
        (label_ref 152)) printf.cpp:35 654 {jump}
     (nil)
 -> 152)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 176 175 155)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 155 176 156 16 8 "" [1 uses])
(note 156 155 157 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 158 16 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1x") [flags 0x2]  <var_decl 0x7f80af469c60 x>) [0 x+0 S2 A16])
        (const_int 0 [0])) printf.cpp:38 92 {*movhi_internal}
     (nil))
(insn 158 157 159 16 (set (mem/c:HI (symbol_ref:SI ("_ZZ6printfPcE1y") [flags 0x2]  <var_decl 0x7f80af469cf0 y>) [0 y+0 S2 A16])
        (const_int 0 [0])) printf.cpp:39 92 {*movhi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 159 158 160 17 7 "" [1 uses])
(note 160 159 161 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 161 160 177 17 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) printf.cpp:15 217 {*addsi_1}
     (nil))
(jump_insn 177 161 178 17 (set (pc)
        (label_ref 162)) printf.cpp:15 654 {jump}
     (nil)
 -> 162)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 178 177 180)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 18, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 180 178 179 19 14 "" [1 uses])
(note 179 180 181 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 181 179 167 19 (const_int 0 [0]) printf.cpp:42 684 {nop}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 167 181 168 18 1 "" [0 uses])
(note 168 167 184 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 184 168 0 NOTE_INSN_DELETED)
