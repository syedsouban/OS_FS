
;; Function GlobalDescriptorTable::GlobalDescriptorTable() (_ZN21GlobalDescriptorTableC2Ev, funcdef_no=1, decl_uid=1113, cgraph_uid=1, symbol_order=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 34.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:18
  a1(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a2(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:5
  a3(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a4(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a5(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a6(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a7(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a8(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a9(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8

   Insn 45(l0): point = 0
   Insn 42(l0): point = 2
   Insn 41(l0): point = 4
   Insn 40(l0): point = 6
   Insn 39(l0): point = 8
   Insn 38(l0): point = 10
   Insn 37(l0): point = 12
   Insn 36(l0): point = 14
   Insn 35(l0): point = 16
   Insn 34(l0): point = 18
   Insn 33(l0): point = 20
   Insn 32(l0): point = 22
   Insn 31(l0): point = 24
   Insn 30(l0): point = 26
   Insn 29(l0): point = 28
   Insn 28(l0): point = 30
   Insn 27(l0): point = 32
   Insn 26(l0): point = 34
   Insn 25(l0): point = 36
   Insn 24(l0): point = 38
   Insn 23(l0): point = 40
   Insn 22(l0): point = 42
   Insn 21(l0): point = 44
   Insn 20(l0): point = 46
   Insn 19(l0): point = 48
   Insn 18(l0): point = 50
   Insn 17(l0): point = 52
   Insn 16(l0): point = 54
   Insn 15(l0): point = 56
   Insn 14(l0): point = 58
   Insn 13(l0): point = 60
   Insn 12(l0): point = 62
   Insn 11(l0): point = 64
   Insn 10(l0): point = 66
   Insn 9(l0): point = 68
   Insn 8(l0): point = 70
   Insn 7(l0): point = 72
   Insn 6(l0): point = 74
   Insn 5(l0): point = 76
 a0(r93): [3..6]
 a1(r92): [9..10]
 a2(r91): [13..14]
 a3(r90): [21..28]
 a4(r96): [29..30]
 a5(r89): [37..44]
 a6(r95): [45..46]
 a7(r88): [53..60]
 a8(r94): [61..62]
 a9(r87): [69..76]
Compressing live ranges: from 79 to 20 - 25%
Ranges after the compression:
 a0(r93): [0..1]
 a1(r92): [2..3]
 a2(r91): [4..5]
 a3(r90): [6..7]
 a4(r96): [8..9]
 a5(r89): [10..11]
 a6(r95): [12..13]
 a7(r88): [14..15]
 a8(r94): [16..17]
 a9(r87): [18..19]
  regions=1, blocks=3, points=20
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=10
Disposition:
    9:r87  l0     0    7:r88  l0     0    5:r89  l0     0    3:r90  l0     0
    2:r91  l0     0    1:r92  l0     0    0:r93  l0     0    8:r94  l0     0
    6:r95  l0     0    4:r96  l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


GlobalDescriptorTable::GlobalDescriptorTable()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 6[bp] 7[sp] 17[flags] 18[fpsr]
;;  ref usage 	r0={5d} r1={5d} r2={5d} r6={1d,2u} r7={21d,30u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,6u,3e} r17={14d} r18={5d} r19={4d} r20={1d,5u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={2d,2u} r94={1d,1u} r95={1d,1u} r96={1d,1u} 
;;    total ref usage 402{345d,54u,3e} in 39{35 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 87 [ D.1281 ])
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 7 6 8 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 8 7 9 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 9 8 10 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 87 [ D.1281 ])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_DEAD (reg/f:SI 87 [ D.1281 ])
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 12 11 13 2 (set (reg/f:SI 94)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 88 [ D.1281 ])
                (plus:SI (reg/f:SI 94)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 94)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 14 13 15 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 15 14 16 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 16 15 17 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 17 16 18 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 88 [ D.1281 ])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_DEAD (reg/f:SI 88 [ D.1281 ])
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(call_insn 18 17 19 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 20 19 21 2 (set (reg/f:SI 95)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg/f:SI 89 [ D.1281 ])
                (plus:SI (reg/f:SI 95)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 95)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 22 21 23 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 154 [0x9a])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 23 22 24 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 67108864 [0x4000000])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 24 23 25 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 25 24 26 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 89 [ D.1281 ])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_DEAD (reg/f:SI 89 [ D.1281 ])
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(call_insn 26 25 27 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 27 26 28 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 28 27 29 2 (set (reg/f:SI 96)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:13 90 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:SI 90 [ D.1281 ])
                (plus:SI (reg/f:SI 96)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 96)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 30 29 31 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 146 [0x92])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 31 30 32 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 67108864 [0x4000000])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 32 31 33 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 33 32 34 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 90 [ D.1281 ])) gdt.cpp:13 66 {*pushsi2}
     (expr_list:REG_DEAD (reg/f:SI 90 [ D.1281 ])
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(call_insn 34 33 35 2 (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh") [flags 0x3]  <function_decl 0x7f182a6e11b0 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) gdt.cpp:13 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 35 34 36 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:13 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 36 35 37 2 (set (reg:SI 91 [ D.1282 ])
        (const_int 2097152 [0x200000])) gdt.cpp:16 90 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (mem/j/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (reg:SI 91 [ D.1282 ])) gdt.cpp:16 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ D.1282 ])
        (nil)))
(insn 38 37 39 2 (set (reg:SI 92 [ D.1282 ])
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:17 90 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (mem/j/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+4 S4 A32])
        (reg:SI 92 [ D.1282 ])) gdt.cpp:17 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.1282 ])
        (nil)))
(insn 40 39 41 2 (parallel [
            (set (reg/f:SI 93 [ D.1283 ])
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:18 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 41 40 42 2 (parallel [
            (set (reg/f:SI 93 [ D.1283 ])
                (plus:SI (reg/f:SI 93 [ D.1283 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:18 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 42 41 45 2 (parallel [
            (asm_operands/v ("lgdt (%0)") ("") 0 [
                    (reg/f:SI 93 [ D.1283 ])
                ]
                 [
                    (asm_input:SI ("p") gdt.cpp:18)
                ]
                 [] gdt.cpp:18)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) gdt.cpp:18 -1
     (expr_list:REG_DEAD (reg/f:SI 93 [ D.1283 ])
        (expr_list:REG_UNUSED (reg:QI 18 fpsr)
            (expr_list:REG_UNUSED (reg:QI 17 flags)
                (nil)))))
(insn 45 42 0 2 (const_int 0 [0]) gdt.cpp:19 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function GlobalDescriptorTable::~GlobalDescriptorTable() (_ZN21GlobalDescriptorTableD2Ev, funcdef_no=4, decl_uid=1118, cgraph_uid=4, symbol_order=4)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 7(l0): point = 0
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0
Disposition:
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


GlobalDescriptorTable::~GlobalDescriptorTable()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 6[bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} 
;;    total ref usage 14{7d,7u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 0 2 (const_int 0 [0]) gdt.cpp:24 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function uint16_t GlobalDescriptorTable::GetDataSegmentOffset() (_ZN21GlobalDescriptorTable20GetDataSegmentOffsetEv, funcdef_no=6, decl_uid=1107, cgraph_uid=6, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a1(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4

   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
   Insn 8(l0): point = 4
   Insn 5(l0): point = 6
 a0(r88): [3..4]
 a1(r87): [5..6]
Compressing live ranges: from 9 to 4 - 44%
Ranges after the compression:
 a0(r88): [0..1]
 a1(r87): [2..3]
  regions=1, blocks=3, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    1:r87  l0     0    0:r88  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


uint16_t GlobalDescriptorTable::GetDataSegmentOffset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r87={1d,1u} r88={1d,1u} 
;;    total ref usage 21{10d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 8 2 (set (reg:HI 87 [ D.1284 ])
        (const_int 24 [0x18])) gdt.cpp:30 92 {*movhi_internal}
     (nil))
(insn 8 5 12 2 (set (reg:HI 88 [ <retval> ])
        (reg:HI 87 [ D.1284 ])) gdt.cpp:30 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 87 [ D.1284 ])
        (nil)))
(insn 12 8 13 2 (set (reg/i:HI 0 ax)
        (reg:HI 88 [ <retval> ])) gdt.cpp:31 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 88 [ <retval> ])
        (nil)))
(insn 13 12 0 2 (use (reg/i:HI 0 ax)) gdt.cpp:31 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function uint16_t GlobalDescriptorTable::GetCodeSegmentOffset() (_ZN21GlobalDescriptorTable20GetCodeSegmentOffsetEv, funcdef_no=7, decl_uid=1109, cgraph_uid=7, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a1(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4

   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
   Insn 8(l0): point = 4
   Insn 5(l0): point = 6
 a0(r88): [3..4]
 a1(r87): [5..6]
Compressing live ranges: from 9 to 4 - 44%
Ranges after the compression:
 a0(r88): [0..1]
 a1(r87): [2..3]
  regions=1, blocks=3, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    1:r87  l0     0    0:r88  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


uint16_t GlobalDescriptorTable::GetCodeSegmentOffset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r87={1d,1u} r88={1d,1u} 
;;    total ref usage 21{10d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 8 2 (set (reg:HI 87 [ D.1285 ])
        (const_int 16 [0x10])) gdt.cpp:35 92 {*movhi_internal}
     (nil))
(insn 8 5 12 2 (set (reg:HI 88 [ <retval> ])
        (reg:HI 87 [ D.1285 ])) gdt.cpp:35 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 87 [ D.1285 ])
        (nil)))
(insn 12 8 13 2 (set (reg/i:HI 0 ax)
        (reg:HI 88 [ <retval> ])) gdt.cpp:36 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 88 [ <retval> ])
        (nil)))
(insn 13 12 0 2 (use (reg/i:HI 0 ax)) gdt.cpp:36 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function GlobalDescriptorTable::SegmentDescriptor::SegmentDescriptor(uint32_t, uint32_t, uint8_t) (_ZN21GlobalDescriptorTable17SegmentDescriptorC2Ejjh, funcdef_no=9, decl_uid=1087, cgraph_uid=9, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r138: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a1 (r138,l0) best Q_REGS, allocno Q_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a51 (r115,l0) best Q_REGS, allocno Q_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a4 (r113,l0) best Q_REGS, allocno Q_REGS
    r112: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a5 (r112,l0) best Q_REGS, allocno Q_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a10 (r109,l0) best Q_REGS, allocno Q_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a15 (r106,l0) best Q_REGS, allocno Q_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a20 (r103,l0) best Q_REGS, allocno Q_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a24 (r101,l0) best Q_REGS, allocno Q_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a26 (r97,l0) best Q_REGS, allocno Q_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a34 (r94,l0) best Q_REGS, allocno Q_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a39 (r91,l0) best Q_REGS, allocno Q_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a1(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:8
  a2(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a3(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a4(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a5(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:6
  a6(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a7(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a8(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a9(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a10(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a11(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a12(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a13(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a14(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a15(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a16(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a17(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a18(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a19(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a20(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a21(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a22(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a23(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a24(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a25(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a26(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a27(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a28(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a29(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a30(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a31(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a32(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a33(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a34(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a35(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a36(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a37(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a38(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a39(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:5
  a40(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a41(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a42(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a43(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a44(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a45(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a46(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a47(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a48(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a49(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a50(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a51(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 GENERAL_REGS:2 MEM:8

   Insn 92(l0): point = 0
   Insn 89(l0): point = 2
   Insn 88(l0): point = 4
   Insn 87(l0): point = 6
   Insn 86(l0): point = 8
   Insn 85(l0): point = 10
   Insn 84(l0): point = 12
   Insn 83(l0): point = 14
   Insn 82(l0): point = 16
   Insn 81(l0): point = 18
   Insn 80(l0): point = 20
   Insn 79(l0): point = 22
   Insn 78(l0): point = 24
   Insn 77(l0): point = 26
   Insn 76(l0): point = 28
   Insn 75(l0): point = 30
   Insn 74(l0): point = 32
   Insn 73(l0): point = 34
   Insn 72(l0): point = 36
   Insn 71(l0): point = 38
   Insn 70(l0): point = 40
   Insn 69(l0): point = 42
   Insn 68(l0): point = 44
   Insn 67(l0): point = 46
   Insn 66(l0): point = 48
   Insn 65(l0): point = 50
   Insn 64(l0): point = 52
   Insn 63(l0): point = 54
   Insn 62(l0): point = 56
   Insn 61(l0): point = 58
   Insn 60(l0): point = 60
   Insn 59(l0): point = 62
   Insn 58(l0): point = 64
   Insn 57(l0): point = 66
   Insn 56(l0): point = 68
   Insn 55(l0): point = 70
   Insn 54(l0): point = 72
   Insn 53(l0): point = 74
   Insn 52(l0): point = 76
   Insn 51(l0): point = 78
   Insn 50(l0): point = 80
   Insn 49(l0): point = 82
   Insn 48(l0): point = 84
   Insn 47(l0): point = 86
   Insn 46(l0): point = 88
   Insn 45(l0): point = 90
   Insn 44(l0): point = 92
   Insn 43(l0): point = 94
   Insn 42(l0): point = 96
   Insn 41(l0): point = 98
   Insn 40(l0): point = 100
   Insn 37(l0): point = 103
   Insn 36(l0): point = 105
   Insn 35(l0): point = 107
   Insn 32(l0): point = 110
   Insn 95(l0): point = 113
   Insn 27(l0): point = 115
   Insn 26(l0): point = 117
   Insn 25(l0): point = 119
   Insn 24(l0): point = 121
   Insn 22(l0): point = 124
   Insn 21(l0): point = 126
   Insn 20(l0): point = 128
   Insn 19(l0): point = 130
   Insn 93(l0): point = 133
   Insn 14(l0): point = 135
   Insn 13(l0): point = 137
   Insn 12(l0): point = 139
   Insn 10(l0): point = 142
   Insn 9(l0): point = 144
   Insn 8(l0): point = 146
   Insn 7(l0): point = 148
   Insn 3(l0): point = 150
   Insn 2(l0): point = 152
 a0(r114): [3..6]
 a1(r138): [3..4]
 a2(r137): [7..8]
 a3(r110): [11..22]
 a4(r113): [11..12]
 a5(r112): [13..14]
 a6(r111): [17..18]
 a7(r136): [19..20]
 a8(r135): [23..24]
 a9(r107): [27..34]
 a10(r109): [27..28]
 a11(r108): [29..30]
 a12(r134): [31..32]
 a13(r133): [35..36]
 a14(r104): [39..46]
 a15(r106): [39..40]
 a16(r105): [41..42]
 a17(r132): [43..44]
 a18(r131): [47..48]
 a19(r102): [51..56]
 a20(r103): [51..52]
 a21(r130): [53..54]
 a22(r129): [57..58]
 a23(r95): [61..78]
 a24(r101): [61..62]
 a25(r100): [63..64]
 a26(r97): [63..72]
 a27(r99): [65..66]
 a28(r98): [67..68]
 a29(r128): [69..70]
 a30(r96): [73..74]
 a31(r127): [75..76]
 a32(r126): [79..80]
 a33(r92): [83..90]
 a34(r94): [83..84]
 a35(r93): [85..86]
 a36(r125): [87..88]
 a37(r124): [91..92]
 a38(r123): [95..96]
 a39(r91): [95..98]
 a40(r122): [99..100]
 a41(r90): [104..105]
 a42(r121): [106..107]
 a43(r120): [116..117]
 a44(r89): [118..119]
 a45(r119): [120..121]
 a46(r88): [127..128]
 a47(r118): [129..130]
 a48(r87): [136..137]
 a49(r117): [138..139]
 a50(r116): [147..148]
 a51(r115): [151..152]
Compressing live ranges: from 155 to 86 - 55%
Ranges after the compression:
 a0(r114): [0..1]
 a1(r138): [0..1]
 a2(r137): [2..3]
 a3(r110): [4..11]
 a4(r113): [4..5]
 a5(r112): [6..7]
 a6(r111): [8..9]
 a7(r136): [10..11]
 a8(r135): [12..13]
 a9(r107): [14..19]
 a10(r109): [14..15]
 a11(r108): [16..17]
 a12(r134): [18..19]
 a13(r133): [20..21]
 a14(r104): [22..27]
 a15(r106): [22..23]
 a16(r105): [24..25]
 a17(r132): [26..27]
 a18(r131): [28..29]
 a19(r102): [30..33]
 a20(r103): [30..31]
 a21(r130): [32..33]
 a22(r129): [34..35]
 a23(r95): [36..49]
 a24(r101): [36..37]
 a25(r100): [38..39]
 a26(r97): [38..45]
 a27(r99): [40..41]
 a28(r98): [42..43]
 a29(r128): [44..45]
 a30(r96): [46..47]
 a31(r127): [48..49]
 a32(r126): [50..51]
 a33(r92): [52..57]
 a34(r94): [52..53]
 a35(r93): [54..55]
 a36(r125): [56..57]
 a37(r124): [58..59]
 a38(r123): [60..61]
 a39(r91): [60..61]
 a40(r122): [62..63]
 a41(r90): [64..65]
 a42(r121): [66..67]
 a43(r120): [68..69]
 a44(r89): [70..71]
 a45(r119): [72..73]
 a46(r88): [74..75]
 a47(r118): [76..77]
 a48(r87): [78..79]
 a49(r117): [80..81]
 a50(r116): [82..83]
 a51(r115): [84..85]
  regions=1, blocks=9, points=86
    allocnos=52 (big 0), copies=0, conflicts=0, ranges=52
Disposition:
   48:r87  l0     0   46:r88  l0     0   44:r89  l0     0   41:r90  l0     0
   39:r91  l0     1   33:r92  l0     0   35:r93  l0     1   34:r94  l0     1
   23:r95  l0     0   30:r96  l0     1   26:r97  l0     2   28:r98  l0     1
   27:r99  l0     1   25:r100 l0     1   24:r101 l0     1   19:r102 l0     0
   20:r103 l0     1   14:r104 l0     0   16:r105 l0     1   15:r106 l0     1
    9:r107 l0     0   11:r108 l0     1   10:r109 l0     1    3:r110 l0     0
    6:r111 l0     1    5:r112 l0     1    4:r113 l0     1    0:r114 l0     1
   51:r115 l0     0   50:r116 l0     0   49:r117 l0     0   47:r118 l0     0
   45:r119 l0     0   43:r120 l0     0   42:r121 l0     0   40:r122 l0     0
   38:r123 l0     0   37:r124 l0     0   36:r125 l0     1   32:r126 l0     0
   31:r127 l0     1   29:r128 l0     1   22:r129 l0     0   21:r130 l0     1
   18:r131 l0     0   17:r132 l0     1   13:r133 l0     0   12:r134 l0     1
    8:r135 l0     0    7:r136 l0     1    2:r137 l0     0    1:r138 l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


GlobalDescriptorTable::SegmentDescriptor::SegmentDescriptor(uint32_t, uint32_t, uint8_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 6[bp] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r6={1d,8u} r7={1d,8u} r16={1d,22u,7e} r17={24d,3u} r20={1d,22u,10e} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} 
;;    total ref usage 215{83d,115u,17e} in 74{74 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg:SI 115)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 12 [0xc])) [0 access_byte+0 S4 A32])) gdt.cpp:38 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 access_byte+0 S1 A32])
        (subreg:QI (reg:SI 115) 0)) gdt.cpp:38 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 116)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:40 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
        (reg/f:SI 116)) gdt.cpp:40 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))
(insn 9 8 10 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 limit+0 S4 A32])
            (const_int 65536 [0x10000]))) gdt.cpp:41 7 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) gdt.cpp:41 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 117
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 117)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:43 90 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 87 [ D.1286 ])
                (plus:SI (reg/f:SI 117)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:43 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 117)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 6 [0x6]))
                (nil)))))
(insn 14 13 93 3 (set (mem:QI (reg/f:SI 87 [ D.1286 ]) [0 *_7+0 S1 A8])
        (const_int 64 [0x40])) gdt.cpp:43 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87 [ D.1286 ])
        (nil)))
(jump_insn 93 14 94 3 (set (pc)
        (label_ref 38)) 654 {jump}
     (nil)
 -> 38)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 17)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 118
(code_label 17 94 18 4 8 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 limit+0 S4 A32])) gdt.cpp:47 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:SI 88 [ D.1287 ])
                (and:SI (reg:SI 118)
                    (const_int 4095 [0xfff])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:47 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 118)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [0 limit+0 S4 A32])
                    (const_int 4095 [0xfff]))
                (nil)))))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ D.1287 ])
            (const_int 4095 [0xfff]))) gdt.cpp:47 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ D.1287 ])
        (nil)))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) gdt.cpp:47 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 30)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 119 120
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 limit+0 S4 A32])) gdt.cpp:48 90 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:SI 89 [ D.1287 ])
                (lshiftrt:SI (reg:SI 119)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:48 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 119)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [0 limit+0 S4 A32])
                    (const_int 12 [0xc]))
                (nil)))))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 120)
                (plus:SI (reg:SI 89 [ D.1287 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:48 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.1287 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 27 26 95 5 (set (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 limit+0 S4 A32])
        (reg:SI 120)) gdt.cpp:48 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(jump_insn 95 27 96 5 (set (pc)
        (label_ref 33)) 654 {jump}
     (nil)
 -> 33)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 96 95 30)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 96 31 6 10 "" [1 uses])
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                        (const_int 8 [0x8])) [0 limit+0 S4 A32])
                (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [0 limit+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:50 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 121
(code_label 33 32 34 7 11 "" [1 uses])
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:51 90 {*movsi_internal}
     (nil))
(insn 36 35 37 7 (parallel [
            (set (reg/f:SI 90 [ D.1286 ])
                (plus:SI (reg/f:SI 121)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:51 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 121)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 6 [0x6]))
                (nil)))))
(insn 37 36 38 7 (set (mem:QI (reg/f:SI 90 [ D.1286 ]) [0 *_14+0 S1 A8])
        (const_int -64 [0xffffffffffffffc0])) gdt.cpp:51 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 90 [ D.1286 ])
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138
(code_label 38 37 39 8 9 "" [1 uses])
(note 39 38 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (reg:SI 122)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 limit+0 S4 A32])) gdt.cpp:53 90 {*movsi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:QI 91 [ D.1288 ])
        (subreg:QI (reg:SI 122) 0)) gdt.cpp:53 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 42 41 43 8 (set (reg/f:SI 123)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:53 90 {*movsi_internal}
     (nil))
(insn 43 42 44 8 (set (mem:QI (reg/f:SI 123) [0 *target_5+0 S1 A8])
        (reg:QI 91 [ D.1288 ])) gdt.cpp:53 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 123)
        (expr_list:REG_DEAD (reg:QI 91 [ D.1288 ])
            (nil))))
(insn 44 43 45 8 (set (reg/f:SI 124)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:54 90 {*movsi_internal}
     (nil))
(insn 45 44 46 8 (parallel [
            (set (reg/f:SI 92 [ D.1286 ])
                (plus:SI (reg/f:SI 124)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:54 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 124)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 46 45 47 8 (set (reg:SI 125)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 limit+0 S4 A32])) gdt.cpp:54 90 {*movsi_internal}
     (nil))
(insn 47 46 48 8 (parallel [
            (set (reg:SI 93 [ D.1287 ])
                (lshiftrt:SI (reg:SI 125)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:54 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [0 limit+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 48 47 49 8 (set (reg:QI 94 [ D.1288 ])
        (subreg:QI (reg:SI 93 [ D.1287 ]) 0)) gdt.cpp:54 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ D.1287 ])
        (nil)))
(insn 49 48 50 8 (set (mem:QI (reg/f:SI 92 [ D.1286 ]) [0 *_18+0 S1 A8])
        (reg:QI 94 [ D.1288 ])) gdt.cpp:54 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 94 [ D.1288 ])
        (expr_list:REG_DEAD (reg/f:SI 92 [ D.1286 ])
            (nil))))
(insn 50 49 51 8 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:55 90 {*movsi_internal}
     (nil))
(insn 51 50 52 8 (parallel [
            (set (reg/f:SI 95 [ D.1286 ])
                (plus:SI (reg/f:SI 126)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 126)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 6 [0x6]))
                (nil)))))
(insn 52 51 53 8 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:55 90 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg/f:SI 96 [ D.1286 ])
                (plus:SI (reg/f:SI 127)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 6 [0x6]))
                (nil)))))
(insn 54 53 55 8 (set (reg:QI 97 [ D.1288 ])
        (mem:QI (reg/f:SI 96 [ D.1286 ]) [0 *_23+0 S1 A8])) gdt.cpp:55 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 96 [ D.1286 ])
        (nil)))
(insn 55 54 56 8 (set (reg:SI 128)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 limit+0 S4 A32])) gdt.cpp:55 90 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:SI 98 [ D.1287 ])
                (lshiftrt:SI (reg:SI 128)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [0 limit+0 S4 A32])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 57 56 58 8 (set (reg:QI 99 [ D.1288 ])
        (subreg:QI (reg:SI 98 [ D.1287 ]) 0)) gdt.cpp:55 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 98 [ D.1287 ])
        (nil)))
(insn 58 57 59 8 (parallel [
            (set (reg:QI 100 [ D.1288 ])
                (and:QI (reg:QI 99 [ D.1288 ])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 384 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 99 [ D.1288 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 59 58 60 8 (parallel [
            (set (reg:QI 101 [ D.1288 ])
                (ior:QI (reg:QI 97 [ D.1288 ])
                    (reg:QI 100 [ D.1288 ])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:55 405 {*iorqi_1}
     (expr_list:REG_DEAD (reg:QI 100 [ D.1288 ])
        (expr_list:REG_DEAD (reg:QI 97 [ D.1288 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 60 59 61 8 (set (mem:QI (reg/f:SI 95 [ D.1286 ]) [0 *_22+0 S1 A8])
        (reg:QI 101 [ D.1288 ])) gdt.cpp:55 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 101 [ D.1288 ])
        (expr_list:REG_DEAD (reg/f:SI 95 [ D.1286 ])
            (nil))))
(insn 61 60 62 8 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:57 90 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (parallel [
            (set (reg/f:SI 102 [ D.1286 ])
                (plus:SI (reg/f:SI 129)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:57 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 2 [0x2]))
                (nil)))))
(insn 63 62 64 8 (set (reg:SI 130)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 base+0 S4 A32])) gdt.cpp:57 90 {*movsi_internal}
     (nil))
(insn 64 63 65 8 (set (reg:QI 103 [ D.1288 ])
        (subreg:QI (reg:SI 130) 0)) gdt.cpp:57 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 130)
        (nil)))
(insn 65 64 66 8 (set (mem:QI (reg/f:SI 102 [ D.1286 ]) [0 *_30+0 S1 A8])
        (reg:QI 103 [ D.1288 ])) gdt.cpp:57 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 103 [ D.1288 ])
        (expr_list:REG_DEAD (reg/f:SI 102 [ D.1286 ])
            (nil))))
(insn 66 65 67 8 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:58 90 {*movsi_internal}
     (nil))
(insn 67 66 68 8 (parallel [
            (set (reg/f:SI 104 [ D.1286 ])
                (plus:SI (reg/f:SI 131)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:58 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 68 67 69 8 (set (reg:SI 132)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 base+0 S4 A32])) gdt.cpp:58 90 {*movsi_internal}
     (nil))
(insn 69 68 70 8 (parallel [
            (set (reg:SI 105 [ D.1287 ])
                (lshiftrt:SI (reg:SI 132)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:58 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 132)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 base+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 70 69 71 8 (set (reg:QI 106 [ D.1288 ])
        (subreg:QI (reg:SI 105 [ D.1287 ]) 0)) gdt.cpp:58 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 105 [ D.1287 ])
        (nil)))
(insn 71 70 72 8 (set (mem:QI (reg/f:SI 104 [ D.1286 ]) [0 *_34+0 S1 A8])
        (reg:QI 106 [ D.1288 ])) gdt.cpp:58 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 106 [ D.1288 ])
        (expr_list:REG_DEAD (reg/f:SI 104 [ D.1286 ])
            (nil))))
(insn 72 71 73 8 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:59 90 {*movsi_internal}
     (nil))
(insn 73 72 74 8 (parallel [
            (set (reg/f:SI 107 [ D.1286 ])
                (plus:SI (reg/f:SI 133)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:59 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 133)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 4 [0x4]))
                (nil)))))
(insn 74 73 75 8 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 base+0 S4 A32])) gdt.cpp:59 90 {*movsi_internal}
     (nil))
(insn 75 74 76 8 (parallel [
            (set (reg:SI 108 [ D.1287 ])
                (lshiftrt:SI (reg:SI 134)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:59 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 134)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 base+0 S4 A32])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 76 75 77 8 (set (reg:QI 109 [ D.1288 ])
        (subreg:QI (reg:SI 108 [ D.1287 ]) 0)) gdt.cpp:59 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 108 [ D.1287 ])
        (nil)))
(insn 77 76 78 8 (set (mem:QI (reg/f:SI 107 [ D.1286 ]) [0 *_38+0 S1 A8])
        (reg:QI 109 [ D.1288 ])) gdt.cpp:59 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 109 [ D.1288 ])
        (expr_list:REG_DEAD (reg/f:SI 107 [ D.1286 ])
            (nil))))
(insn 78 77 79 8 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:60 90 {*movsi_internal}
     (nil))
(insn 79 78 80 8 (parallel [
            (set (reg/f:SI 110 [ D.1286 ])
                (plus:SI (reg/f:SI 135)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:60 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 135)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 7 [0x7]))
                (nil)))))
(insn 80 79 81 8 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 base+0 S4 A32])) gdt.cpp:60 90 {*movsi_internal}
     (nil))
(insn 81 80 82 8 (parallel [
            (set (reg:SI 111 [ D.1287 ])
                (lshiftrt:SI (reg:SI 136)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:60 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 base+0 S4 A32])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 82 81 83 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 111 [ D.1287 ])
            (const_int 0 [0]))) gdt.cpp:60 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 111 [ D.1287 ])
        (nil)))
(insn 83 82 84 8 (set (reg:QI 112 [ D.1289 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) gdt.cpp:60 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 84 83 85 8 (set (reg:QI 113 [ D.1288 ])
        (reg:QI 112 [ D.1289 ])) gdt.cpp:60 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 112 [ D.1289 ])
        (nil)))
(insn 85 84 86 8 (set (mem:QI (reg/f:SI 110 [ D.1286 ]) [0 *_42+0 S1 A8])
        (reg:QI 113 [ D.1288 ])) gdt.cpp:60 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 113 [ D.1288 ])
        (expr_list:REG_DEAD (reg/f:SI 110 [ D.1286 ])
            (nil))))
(insn 86 85 87 8 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:62 90 {*movsi_internal}
     (nil))
(insn 87 86 88 8 (parallel [
            (set (reg/f:SI 114 [ D.1286 ])
                (plus:SI (reg/f:SI 137)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:62 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 137)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 88 87 89 8 (set (reg:QI 138)
        (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 access_byte+0 S1 A32])) gdt.cpp:62 93 {*movqi_internal}
     (nil))
(insn 89 88 92 8 (set (mem:QI (reg/f:SI 114 [ D.1286 ]) [0 *_47+0 S1 A8])
        (reg:QI 138)) gdt.cpp:62 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 138)
        (expr_list:REG_DEAD (reg/f:SI 114 [ D.1286 ])
            (nil))))
(insn 92 89 0 8 (const_int 0 [0]) gdt.cpp:63 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function uint32_t GlobalDescriptorTable::SegmentDescriptor::GetBase() (_ZN21GlobalDescriptorTable17SegmentDescriptor7GetBaseEv, funcdef_no=11, decl_uid=1078, cgraph_uid=11, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r102,l0) best AREG, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a5 (r99,l0) best Q_REGS, allocno Q_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a12 (r95,l0) best Q_REGS, allocno Q_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a19 (r91,l0) best Q_REGS, allocno Q_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a24 (r88,l0) best Q_REGS, allocno Q_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a1(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a2(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a3(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a4(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a5(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a6(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a7(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a8(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a9(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a10(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a11(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a12(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a13(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a14(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a15(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a16(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a17(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a18(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a19(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a20(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a21(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a22(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a23(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a24(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a25(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a26(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a27(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8

   Insn 44(l0): point = 0
   Insn 43(l0): point = 2
   Insn 39(l0): point = 4
   Insn 36(l0): point = 6
   Insn 35(l0): point = 8
   Insn 34(l0): point = 10
   Insn 33(l0): point = 12
   Insn 32(l0): point = 14
   Insn 31(l0): point = 16
   Insn 30(l0): point = 18
   Insn 29(l0): point = 20
   Insn 28(l0): point = 22
   Insn 27(l0): point = 24
   Insn 26(l0): point = 26
   Insn 25(l0): point = 28
   Insn 24(l0): point = 30
   Insn 23(l0): point = 32
   Insn 22(l0): point = 34
   Insn 21(l0): point = 36
   Insn 20(l0): point = 38
   Insn 19(l0): point = 40
   Insn 18(l0): point = 42
   Insn 17(l0): point = 44
   Insn 16(l0): point = 46
   Insn 15(l0): point = 48
   Insn 14(l0): point = 50
   Insn 13(l0): point = 52
   Insn 12(l0): point = 54
   Insn 11(l0): point = 56
   Insn 10(l0): point = 58
   Insn 9(l0): point = 60
   Insn 8(l0): point = 62
   Insn 7(l0): point = 64
   Insn 6(l0): point = 66
   Insn 5(l0): point = 68
 a0(r102): [3..4]
 a1(r101): [5..6]
 a2(r114): [9..10]
 a3(r100): [11..12]
 a4(r97): [11..20]
 a5(r99): [13..14]
 a6(r98): [15..16]
 a7(r113): [17..18]
 a8(r112): [21..22]
 a9(r111): [25..26]
 a10(r96): [27..28]
 a11(r93): [27..36]
 a12(r95): [29..30]
 a13(r94): [31..32]
 a14(r110): [33..34]
 a15(r109): [37..38]
 a16(r108): [41..42]
 a17(r92): [43..44]
 a18(r89): [43..52]
 a19(r91): [45..46]
 a20(r90): [47..48]
 a21(r107): [49..50]
 a22(r106): [53..54]
 a23(r105): [57..58]
 a24(r88): [59..60]
 a25(r87): [61..62]
 a26(r104): [63..64]
 a27(r103): [67..68]
Compressing live ranges: from 71 to 50 - 70%
Ranges after the compression:
 a0(r102): [0..1]
 a1(r101): [2..3]
 a2(r114): [4..5]
 a3(r100): [6..7]
 a4(r97): [6..13]
 a5(r99): [8..9]
 a6(r98): [10..11]
 a7(r113): [12..13]
 a8(r112): [14..15]
 a9(r111): [16..17]
 a10(r96): [18..19]
 a11(r93): [18..25]
 a12(r95): [20..21]
 a13(r94): [22..23]
 a14(r110): [24..25]
 a15(r109): [26..27]
 a16(r108): [28..29]
 a17(r92): [30..31]
 a18(r89): [30..37]
 a19(r91): [32..33]
 a20(r90): [34..35]
 a21(r107): [36..37]
 a22(r106): [38..39]
 a23(r105): [40..41]
 a24(r88): [42..43]
 a25(r87): [44..45]
 a26(r104): [46..47]
 a27(r103): [48..49]
  regions=1, blocks=3, points=50
    allocnos=28 (big 0), copies=0, conflicts=0, ranges=28
Disposition:
   25:r87  l0     0   24:r88  l0     0   18:r89  l0     1   20:r90  l0     0
   19:r91  l0     0   17:r92  l0     0   11:r93  l0     1   13:r94  l0     0
   12:r95  l0     0   10:r96  l0     0    4:r97  l0     1    6:r98  l0     0
    5:r99  l0     0    3:r100 l0     0    1:r101 l0     0    0:r102 l0     0
   27:r103 l0     0   26:r104 l0     0   23:r105 l0     0   22:r106 l0     0
   21:r107 l0     0   16:r108 l0     0   15:r109 l0     0   14:r110 l0     0
    9:r111 l0     0    8:r112 l0     0    7:r113 l0     0    2:r114 l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


uint32_t GlobalDescriptorTable::SegmentDescriptor::GetBase()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r16={1d,2u} r17={10d} r20={1d,15u,7e} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} 
;;    total ref usage 104{46d,51u,7e} in 35{35 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 103)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:67 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
        (reg/f:SI 103)) gdt.cpp:67 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 103)
        (nil)))
(insn 7 6 8 2 (set (reg/f:SI 104)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:69 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:SI 87 [ D.1290 ])
                (plus:SI (reg/f:SI 104)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:69 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 104)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 7 [0x7]))
                (nil)))))
(insn 9 8 10 2 (set (reg:QI 88 [ D.1291 ])
        (mem:QI (reg/f:SI 87 [ D.1290 ]) [0 *_3+0 S1 A8])) gdt.cpp:69 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87 [ D.1290 ])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 105)
        (zero_extend:SI (reg:QI 88 [ D.1291 ]))) gdt.cpp:69 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 88 [ D.1291 ])
        (nil)))
(insn 11 10 12 2 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 105)) gdt.cpp:69 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 106)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:70 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 89 [ D.1292 ])
                (ashift:SI (reg:SI 106)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:70 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 106)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 14 13 15 2 (set (reg/f:SI 107)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:70 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:SI 90 [ D.1290 ])
                (plus:SI (reg/f:SI 107)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:70 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 107)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 4 [0x4]))
                (nil)))))
(insn 16 15 17 2 (set (reg:QI 91 [ D.1291 ])
        (mem:QI (reg/f:SI 90 [ D.1290 ]) [0 *_8+0 S1 A8])) gdt.cpp:70 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 90 [ D.1290 ])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 92 [ D.1292 ])
        (zero_extend:SI (reg:QI 91 [ D.1291 ]))) gdt.cpp:70 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 91 [ D.1291 ])
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg:SI 108)
                (plus:SI (reg:SI 89 [ D.1292 ])
                    (reg:SI 92 [ D.1292 ])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:70 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 92 [ D.1292 ])
        (expr_list:REG_DEAD (reg:SI 89 [ D.1292 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 19 18 20 2 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 108)) gdt.cpp:70 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108)
        (nil)))
(insn 20 19 21 2 (set (reg:SI 109)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:71 90 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg:SI 93 [ D.1292 ])
                (ashift:SI (reg:SI 109)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:71 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 109)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 22 21 23 2 (set (reg/f:SI 110)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:71 90 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg/f:SI 94 [ D.1290 ])
                (plus:SI (reg/f:SI 110)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:71 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 110)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 24 23 25 2 (set (reg:QI 95 [ D.1291 ])
        (mem:QI (reg/f:SI 94 [ D.1290 ]) [0 *_13+0 S1 A8])) gdt.cpp:71 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 94 [ D.1290 ])
        (nil)))
(insn 25 24 26 2 (set (reg:SI 96 [ D.1292 ])
        (zero_extend:SI (reg:QI 95 [ D.1291 ]))) gdt.cpp:71 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 95 [ D.1291 ])
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg:SI 111)
                (plus:SI (reg:SI 93 [ D.1292 ])
                    (reg:SI 96 [ D.1292 ])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:71 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 96 [ D.1292 ])
        (expr_list:REG_DEAD (reg:SI 93 [ D.1292 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 27 26 28 2 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 111)) gdt.cpp:71 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111)
        (nil)))
(insn 28 27 29 2 (set (reg:SI 112)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:72 90 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg:SI 97 [ D.1292 ])
                (ashift:SI (reg:SI 112)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:72 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 112)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 30 29 31 2 (set (reg/f:SI 113)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])) gdt.cpp:72 90 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (parallel [
            (set (reg/f:SI 98 [ D.1290 ])
                (plus:SI (reg/f:SI 113)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:72 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 113)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 target+0 S4 A32])
                    (const_int 2 [0x2]))
                (nil)))))
(insn 32 31 33 2 (set (reg:QI 99 [ D.1291 ])
        (mem:QI (reg/f:SI 98 [ D.1290 ]) [0 *_18+0 S1 A8])) gdt.cpp:72 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 98 [ D.1290 ])
        (nil)))
(insn 33 32 34 2 (set (reg:SI 100 [ D.1292 ])
        (zero_extend:SI (reg:QI 99 [ D.1291 ]))) gdt.cpp:72 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 99 [ D.1291 ])
        (nil)))
(insn 34 33 35 2 (parallel [
            (set (reg:SI 114)
                (plus:SI (reg:SI 97 [ D.1292 ])
                    (reg:SI 100 [ D.1292 ])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:72 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 100 [ D.1292 ])
        (expr_list:REG_DEAD (reg:SI 97 [ D.1292 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 35 34 36 2 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])
        (reg:SI 114)) gdt.cpp:72 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(insn 36 35 39 2 (set (reg:SI 101 [ D.1293 ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 base+0 S4 A32])) gdt.cpp:73 90 {*movsi_internal}
     (nil))
(insn 39 36 43 2 (set (reg:SI 102 [ <retval> ])
        (reg:SI 101 [ D.1293 ])) gdt.cpp:73 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 101 [ D.1293 ])
        (nil)))
(insn 43 39 44 2 (set (reg/i:SI 0 ax)
        (reg:SI 102 [ <retval> ])) gdt.cpp:74 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102 [ <retval> ])
        (nil)))
(insn 44 43 0 2 (use (reg/i:SI 0 ax)) gdt.cpp:74 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function uint32_t GlobalDescriptorTable::SegmentDescriptor::GetLimit() (_ZN21GlobalDescriptorTable17SegmentDescriptor8GetLimitEv, funcdef_no=12, decl_uid=1080, cgraph_uid=12, symbol_order=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r103,l0) best AREG, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a7 (r98,l0) best Q_REGS, allocno Q_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a13 (r95,l0) best Q_REGS, allocno Q_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a19 (r92,l0) best Q_REGS, allocno Q_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred Q_REGS, alternative GENERAL_REGS, allocno Q_REGS
    a25 (r88,l0) best Q_REGS, allocno Q_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a1(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a2(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a3(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a4(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a5(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a6(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a7(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a8(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a9(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a10(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a11(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a12(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a13(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a14(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a15(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a16(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a17(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a18(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a19(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a20(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a21(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a22(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a23(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a24(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a25(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:4 DIREG:4 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 GENERAL_REGS:4 MEM:7
  a26(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a27(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a28(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8

   Insn 50(l0): point = 0
   Insn 49(l0): point = 2
   Insn 45(l0): point = 4
   Insn 42(l0): point = 6
   Insn 39(l0): point = 9
   Insn 38(l0): point = 11
   Insn 37(l0): point = 13
   Insn 36(l0): point = 15
   Insn 34(l0): point = 18
   Insn 33(l0): point = 20
   Insn 32(l0): point = 22
   Insn 31(l0): point = 24
   Insn 30(l0): point = 26
   Insn 29(l0): point = 28
   Insn 28(l0): point = 30
   Insn 27(l0): point = 32
   Insn 26(l0): point = 34
   Insn 25(l0): point = 36
   Insn 24(l0): point = 38
   Insn 23(l0): point = 40
   Insn 22(l0): point = 42
   Insn 21(l0): point = 44
   Insn 20(l0): point = 46
   Insn 19(l0): point = 48
   Insn 18(l0): point = 50
   Insn 17(l0): point = 52
   Insn 16(l0): point = 54
   Insn 15(l0): point = 56
   Insn 14(l0): point = 58
   Insn 13(l0): point = 60
   Insn 12(l0): point = 62
   Insn 11(l0): point = 64
   Insn 10(l0): point = 66
   Insn 9(l0): point = 68
   Insn 8(l0): point = 70
   Insn 7(l0): point = 72
   Insn 6(l0): point = 74
   Insn 5(l0): point = 76
 a0(r103): [3..4]
 a1(r102): [5..6]
 a2(r115): [10..11]
 a3(r101): [12..13]
 a4(r114): [14..15]
 a5(r100): [21..22]
 a6(r99): [23..24]
 a7(r98): [25..26]
 a8(r97): [27..28]
 a9(r113): [29..30]
 a10(r112): [33..34]
 a11(r96): [35..36]
 a12(r94): [35..42]
 a13(r95): [37..38]
 a14(r111): [39..40]
 a15(r110): [43..44]
 a16(r109): [47..48]
 a17(r93): [49..50]
 a18(r90): [49..58]
 a19(r92): [51..52]
 a20(r91): [53..54]
 a21(r108): [55..56]
 a22(r107): [59..60]
 a23(r106): [63..64]
 a24(r89): [65..66]
 a25(r88): [67..68]
 a26(r87): [69..70]
 a27(r105): [71..72]
 a28(r104): [75..76]
Compressing live ranges: from 79 to 54 - 68%
Ranges after the compression:
 a0(r103): [0..1]
 a1(r102): [2..3]
 a2(r115): [4..5]
 a3(r101): [6..7]
 a4(r114): [8..9]
 a5(r100): [10..11]
 a6(r99): [12..13]
 a7(r98): [14..15]
 a8(r97): [16..17]
 a9(r113): [18..19]
 a10(r112): [20..21]
 a11(r96): [22..23]
 a12(r94): [22..27]
 a13(r95): [24..25]
 a14(r111): [26..27]
 a15(r110): [28..29]
 a16(r109): [30..31]
 a17(r93): [32..33]
 a18(r90): [32..39]
 a19(r92): [34..35]
 a20(r91): [36..37]
 a21(r108): [38..39]
 a22(r107): [40..41]
 a23(r106): [42..43]
 a24(r89): [44..45]
 a25(r88): [46..47]
 a26(r87): [48..49]
 a27(r105): [50..51]
 a28(r104): [52..53]
  regions=1, blocks=5, points=54
    allocnos=29 (big 0), copies=0, conflicts=0, ranges=29
Disposition:
   26:r87  l0     0   25:r88  l0     0   24:r89  l0     0   18:r90  l0     1
   20:r91  l0     0   19:r92  l0     0   17:r93  l0     0   12:r94  l0     1
   13:r95  l0     0   11:r96  l0     0    8:r97  l0     0    7:r98  l0     0
    6:r99  l0     0    5:r100 l0     0    3:r101 l0     0    1:r102 l0     0
    0:r103 l0     0   28:r104 l0     0   27:r105 l0     0   23:r106 l0     0
   22:r107 l0     0   21:r108 l0     0   16:r109 l0     0   15:r110 l0     0
   14:r111 l0     0   10:r112 l0     0    9:r113 l0     0    4:r114 l0     0
    2:r115 l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


uint32_t GlobalDescriptorTable::SegmentDescriptor::GetLimit()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r6={1d,4u} r7={1d,4u} r16={1d,4u} r17={12d,1u} r20={1d,17u,6e} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} 
;;    total ref usage 116{49d,61u,6e} in 38{38 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 104 105 106 107 108 109 110 111 112 113
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 104)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])) gdt.cpp:78 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
        (reg/f:SI 104)) gdt.cpp:78 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 104)
        (nil)))
(insn 7 6 8 2 (set (reg/f:SI 105)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:79 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:SI 87 [ D.1294 ])
                (plus:SI (reg/f:SI 105)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:79 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 105)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
                    (const_int 6 [0x6]))
                (nil)))))
(insn 9 8 10 2 (set (reg:QI 88 [ D.1295 ])
        (mem:QI (reg/f:SI 87 [ D.1294 ]) [0 *_4+0 S1 A8])) gdt.cpp:79 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87 [ D.1294 ])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 89 [ D.1296 ])
        (zero_extend:SI (reg:QI 88 [ D.1295 ]))) gdt.cpp:79 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 88 [ D.1295 ])
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 106)
                (and:SI (reg:SI 89 [ D.1296 ])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:79 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.1296 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 106)) gdt.cpp:79 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 107)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:80 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 90 [ D.1296 ])
                (ashift:SI (reg:SI 107)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:80 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 107)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 15 14 16 2 (set (reg/f:SI 108)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:80 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg/f:SI 91 [ D.1294 ])
                (plus:SI (reg/f:SI 108)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 108)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 17 16 18 2 (set (reg:QI 92 [ D.1295 ])
        (mem:QI (reg/f:SI 91 [ D.1294 ]) [0 *_10+0 S1 A8])) gdt.cpp:80 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 91 [ D.1294 ])
        (nil)))
(insn 18 17 19 2 (set (reg:SI 93 [ D.1296 ])
        (zero_extend:SI (reg:QI 92 [ D.1295 ]))) gdt.cpp:80 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 92 [ D.1295 ])
        (nil)))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 109)
                (plus:SI (reg:SI 90 [ D.1296 ])
                    (reg:SI 93 [ D.1296 ])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 93 [ D.1296 ])
        (expr_list:REG_DEAD (reg:SI 90 [ D.1296 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 20 19 21 2 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 109)) gdt.cpp:80 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 109)
        (nil)))
(insn 21 20 22 2 (set (reg:SI 110)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:81 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg:SI 94 [ D.1296 ])
                (ashift:SI (reg:SI 110)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:81 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 110)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 23 22 24 2 (set (reg/f:SI 111)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:81 90 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:QI 95 [ D.1295 ])
        (mem:QI (reg/f:SI 111) [0 *target_3+0 S1 A8])) gdt.cpp:81 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 111)
        (nil)))
(insn 25 24 26 2 (set (reg:SI 96 [ D.1296 ])
        (zero_extend:SI (reg:QI 95 [ D.1295 ]))) gdt.cpp:81 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 95 [ D.1295 ])
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg:SI 112)
                (plus:SI (reg:SI 94 [ D.1296 ])
                    (reg:SI 96 [ D.1296 ])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 96 [ D.1296 ])
        (expr_list:REG_DEAD (reg:SI 94 [ D.1296 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 27 26 28 2 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 112)) gdt.cpp:81 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 112)
        (nil)))
(insn 28 27 29 2 (set (reg/f:SI 113)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])) gdt.cpp:82 90 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:SI 97 [ D.1294 ])
                (plus:SI (reg/f:SI 113)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 113)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 target+0 S4 A32])
                    (const_int 6 [0x6]))
                (nil)))))
(insn 30 29 31 2 (set (reg:QI 98 [ D.1295 ])
        (mem:QI (reg/f:SI 97 [ D.1294 ]) [0 *_18+0 S1 A8])) gdt.cpp:82 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 97 [ D.1294 ])
        (nil)))
(insn 31 30 32 2 (set (reg:SI 99 [ D.1297 ])
        (zero_extend:SI (reg:QI 98 [ D.1295 ]))) gdt.cpp:82 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 98 [ D.1295 ])
        (nil)))
(insn 32 31 33 2 (parallel [
            (set (reg:SI 100 [ D.1297 ])
                (and:SI (reg:SI 99 [ D.1297 ])
                    (const_int 192 [0xc0])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:82 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 99 [ D.1297 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 33 32 34 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.1297 ])
            (const_int 192 [0xc0]))) gdt.cpp:82 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 100 [ D.1297 ])
        (nil)))
(jump_insn 34 33 35 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) gdt.cpp:82 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 40)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 114 115
(note 35 34 36 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 3 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:83 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg:SI 101 [ D.1296 ])
                (ashift:SI (reg:SI 114)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:83 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 114)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
                    (const_int 12 [0xc]))
                (nil)))))
(insn 38 37 39 3 (parallel [
            (set (reg:SI 115)
                (ior:SI (reg:SI 101 [ D.1296 ])
                    (const_int 4095 [0xfff])))
            (clobber (reg:CC 17 flags))
        ]) gdt.cpp:83 399 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 101 [ D.1296 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 39 38 40 3 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])
        (reg:SI 115)) gdt.cpp:83 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 102 103
(code_label 40 39 41 4 15 "" [1 uses])
(note 41 40 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 45 4 (set (reg:SI 102 [ D.1298 ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 limit+0 S4 A32])) gdt.cpp:84 90 {*movsi_internal}
     (nil))
(insn 45 42 49 4 (set (reg:SI 103 [ <retval> ])
        (reg:SI 102 [ D.1298 ])) gdt.cpp:84 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102 [ D.1298 ])
        (nil)))
(insn 49 45 50 4 (set (reg/i:SI 0 ax)
        (reg:SI 103 [ <retval> ])) gdt.cpp:85 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 103 [ <retval> ])
        (nil)))
(insn 50 49 0 4 (use (reg/i:SI 0 ax)) gdt.cpp:85 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

