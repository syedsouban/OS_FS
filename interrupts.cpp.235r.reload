
;; Function InterruptHandler::InterruptHandler(uint8_t, InterruptManager*) (_ZN16InterruptHandlerC2EhP16InterruptManager, funcdef_no=8, decl_uid=1310, cgraph_uid=8, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 3:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 22: point = 0
   Insn 19: point = 0
   Insn 18: point = 1
   Insn 17: point = 2
   Insn 16: point = 3
   Insn 15: point = 4
   Insn 14: point = 5
   Insn 13: point = 6
   Insn 12: point = 7
   Insn 11: point = 8
   Insn 10: point = 9
   Insn 9: point = 10
   Insn 8: point = 11
   Insn 7: point = 12
   Insn 3: point = 13
   Insn 2: point = 14
Compressing live ranges: from 15 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=4, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 16
changing reg in insn 19
changing reg in insn 2
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
starting the processing of deferred insns
ending the processing of deferred insns


InterruptHandler::InterruptHandler(uint8_t, InterruptManager*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp]
;;  ref usage 	r0={6d,5u} r1={5d,4u} r2={2d,1u} r6={1d,12u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 41{16d,25u,0e} in 16{16 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 89 90 91 92 93 94 95 96
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 interruptNumber+0 S4 A32])) interrupts.cpp:5 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 interruptNumber+0 S1 A32])
        (reg:QI 0 ax [89])) interrupts.cpp:5 93 {*movqi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 1 dx [orig:87 D.1627 ] [87])
        (const:SI (plus:SI (symbol_ref/i:SI ("_ZTV16InterruptHandler") [flags 0x2]  <var_decl 0x7f920469a900 _ZTV16InterruptHandler>)
                (const_int 8 [0x8])))) interrupts.cpp:5 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:5 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/j:SI (reg/f:SI 0 ax [90]) [0 this_3(D)->_vptr.InterruptHandler+0 S4 A32])
        (reg/f:SI 1 dx [orig:87 D.1627 ] [87])) interrupts.cpp:5 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:7 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:QI 1 dx [92])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 interruptNumber+0 S1 A32])) interrupts.cpp:7 93 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/j:QI (plus:SI (reg/f:SI 0 ax [91])
                (const_int 4 [0x4])) [0 this_3(D)->interruptNumber+0 S1 A32])
        (reg:QI 1 dx [92])) interrupts.cpp:7 93 {*movqi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:8 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 1 dx [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 interruptManager+0 S4 A32])) interrupts.cpp:8 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/j:SI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 8 [0x8])) [0 this_3(D)->interruptManager+0 S4 A32])
        (reg/f:SI 1 dx [94])) interrupts.cpp:8 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 1 dx [orig:88 D.1628 ] [88])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:9 138 {*zero_extendqisi2}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 interruptManager+0 S4 A32])) interrupts.cpp:9 90 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 2 cx [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:9 90 {*movsi_internal}
     (nil))
(insn 19 18 22 2 (set (mem/f/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:88 D.1628 ] [88])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [95])) [0 interruptManager_7(D)->handlers S4 A32])
        (reg/f:SI 2 cx [96])) interrupts.cpp:9 90 {*movsi_internal}
     (nil))
(insn 22 19 23 2 (const_int 0 [0]) interrupts.cpp:10 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 22 0 NOTE_INSN_DELETED)

;; Function virtual uint32_t InterruptHandler::HandleInterrupt(uint32_t) (_ZN16InterruptHandler15HandleInterruptEj, funcdef_no=10, decl_uid=1304, cgraph_uid=10, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0
   Insn 12: point = 0
   Insn 8: point = 1
   Insn 5: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 8
changing reg in insn 8
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


virtual uint32_t InterruptHandler::HandleInterrupt(uint32_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r6={1d,3u} r7={1d,2u} r20={1d,1u} 
;;    total ref usage 19{9d,10u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 8 2 (set (reg:SI 0 ax [orig:87 D.1629 ] [87])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 esp+0 S4 A32])) interrupts.cpp:13 90 {*movsi_internal}
     (nil))
(insn 8 5 12 2 (set (reg:SI 0 ax [orig:88 <retval> ] [88])
        (reg:SI 0 ax [orig:87 D.1629 ] [87])) interrupts.cpp:13 90 {*movsi_internal}
     (nil))
(insn 12 8 13 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) interrupts.cpp:14 90 {*movsi_internal}
     (nil))
(insn 13 12 15 2 (use (reg/i:SI 0 ax)) interrupts.cpp:14 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 13 0 NOTE_INSN_DELETED)

;; Function InterruptHandler::~InterruptHandler() (_ZN16InterruptHandlerD2Ev, funcdef_no=12, decl_uid=1317, cgraph_uid=12, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 31: point = 0
  BB 3
   Insn 22: point = 0
   Insn 21: point = 1
   Insn 20: point = 3
   Insn 19: point = 5
   Insn 18: point = 6
   Insn 17: point = 8
  BB 2
   Insn 15: point = 9
   Insn 14: point = 9
   Insn 13: point = 10
   Insn 12: point = 12
   Insn 11: point = 14
   Insn 10: point = 16
   Insn 9: point = 17
   Insn 8: point = 19
   Insn 7: point = 20
   Insn 6: point = 21
   Insn 5: point = 22
Compressing live ranges: from 23 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 7
changing reg in insn 9
changing reg in insn 13
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
starting the processing of deferred insns
ending the processing of deferred insns


InterruptHandler::~InterruptHandler()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 17[flags]
;;  ref usage 	r0={7d,6u} r1={8d,7u} r2={1d} r6={1d,11u} r7={1d,5u} r17={1d,1u} r20={1d,1u} 
;;    total ref usage 51{20d,31u,0e} in 18{18 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 95 96 97
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [orig:87 D.1630 ] [87])
        (const:SI (plus:SI (symbol_ref/i:SI ("_ZTV16InterruptHandler") [flags 0x2]  <var_decl 0x7f920469a900 _ZTV16InterruptHandler>)
                (const_int 8 [0x8])))) interrupts.cpp:16 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:16 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/j:SI (reg/f:SI 0 ax [95]) [0 this_4(D)->_vptr.InterruptHandler+0 S4 A32])
        (reg/f:SI 1 dx [orig:87 D.1630 ] [87])) interrupts.cpp:16 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:17 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [orig:88 D.1631 ] [88])
        (mem/f/j:SI (plus:SI (reg/f:SI 0 ax [96])
                (const_int 8 [0x8])) [0 this_4(D)->interruptManager+0 S4 A32])) interrupts.cpp:17 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 1 dx [97])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:17 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:QI 1 dx [orig:89 D.1632 ] [89])
        (mem/j:QI (plus:SI (reg/f:SI 1 dx [97])
                (const_int 4 [0x4])) [0 this_4(D)->interruptNumber+0 S1 A32])) interrupts.cpp:17 93 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 1 dx [orig:90 D.1633 ] [90])
        (zero_extend:SI (reg:QI 1 dx [orig:89 D.1632 ] [89]))) interrupts.cpp:17 138 {*zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 0 ax [orig:91 D.1634 ] [91])
        (mem/f/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:90 D.1633 ] [90])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [orig:88 D.1631 ] [88])) [0 _6->handlers S4 A32])) interrupts.cpp:17 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:91 D.1634 ] [91])
            (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 this+0 S4 A32]))) interrupts.cpp:17 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 30)
            (pc))) interrupts.cpp:17 612 {*jcc_1}
     (nil)
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92 93 94 98 99
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:18 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:SI 0 ax [orig:92 D.1631 ] [92])
        (mem/f/j:SI (plus:SI (reg/f:SI 0 ax [98])
                (const_int 8 [0x8])) [0 this_4(D)->interruptManager+0 S4 A32])) interrupts.cpp:18 90 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg/f:SI 1 dx [99])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:18 90 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:QI 1 dx [orig:93 D.1632 ] [93])
        (mem/j:QI (plus:SI (reg/f:SI 1 dx [99])
                (const_int 4 [0x4])) [0 this_4(D)->interruptNumber+0 S1 A32])) interrupts.cpp:18 93 {*movqi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 1 dx [orig:94 D.1633 ] [94])
        (zero_extend:SI (reg:QI 1 dx [orig:93 D.1632 ] [93]))) interrupts.cpp:18 138 {*zero_extendqisi2}
     (nil))
(insn 22 21 30 3 (set (mem/f/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:94 D.1633 ] [94])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [orig:92 D.1631 ] [92])) [0 _10->handlers S4 A32])
        (const_int 0 [0])) interrupts.cpp:18 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (NEW, RTL, MODIFIED)
;;  pred:       2
;;              3 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 30 22 29 5 6 "" [1 uses])
(note 29 30 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 29 25 5 (const_int 0 [0]) interrupts.cpp:19 684 {nop}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 31 26 4 4 "" [0 uses])
(note 26 25 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 32 26 0 NOTE_INSN_DELETED)

;; Function static void InterruptManager::SetInterruptDescriptorTableEntry(uint8_t, uint16_t, void (*)(), uint8_t, uint8_t) (_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh, funcdef_no=14, decl_uid=1345, cgraph_uid=14, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=44, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 3:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 9:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) qm {*zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 28:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 31:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 32:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 33:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 35:  (0) m  (1) qn {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 38: point = 0
   Insn 35: point = 0
   Insn 34: point = 1
   Insn 33: point = 2
   Insn 32: point = 3
   Insn 31: point = 5
   Insn 30: point = 7
   Insn 29: point = 9
   Insn 28: point = 11
   Insn 27: point = 13
   Insn 26: point = 14
   Insn 25: point = 15
   Insn 24: point = 16
   Insn 23: point = 17
   Insn 22: point = 18
   Insn 21: point = 19
   Insn 20: point = 21
   Insn 19: point = 23
   Insn 18: point = 24
   Insn 17: point = 25
   Insn 16: point = 26
   Insn 15: point = 28
   Insn 14: point = 29
   Insn 13: point = 30
   Insn 9: point = 30
   Insn 7: point = 31
   Insn 5: point = 32
   Insn 3: point = 33
   Insn 8: point = 34
   Insn 6: point = 35
   Insn 4: point = 36
   Insn 2: point = 37
Compressing live ranges: from 38 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=44, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-4, prev_offset=0)
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 2
changing reg in insn 4
changing reg in insn 6
changing reg in insn 8
changing reg in insn 24
changing reg in insn 25
starting the processing of deferred insns
ending the processing of deferred insns


static void InterruptManager::SetInterruptDescriptorTableEntry(uint8_t, uint16_t, void (*)(), uint8_t, uint8_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 6[bp] 17[flags]
;;  ref usage 	r0={7d,6u} r1={14d,13u} r2={2d,1u} r3={1d,1u} r6={1d,21u} r7={1d,2u} r17={5d} r20={1d,1u} 
;;    total ref usage 77{32d,45u,0e} in 32{32 regular + 0 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 4 2 (set (reg:SI 3 bx [103])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 interruptNumber+0 S4 A32])) interrupts.cpp:27 90 {*movsi_internal}
     (nil))
(insn 4 2 6 2 (set (reg:SI 2 cx [104])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 csSelectorOffset+0 S4 A32])) interrupts.cpp:27 90 {*movsi_internal}
     (nil))
(insn 6 4 8 2 (set (reg:SI 1 dx [105])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 DescriptorPriviligeLevel+0 S4 A32])) interrupts.cpp:27 90 {*movsi_internal}
     (nil))
(insn 8 6 3 2 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 24 [0x18])) [0 DescriptorType+0 S4 A32])) interrupts.cpp:27 90 {*movsi_internal}
     (nil))
(insn 3 8 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 interruptNumber+0 S1 A32])
        (reg:QI 3 bx [103])) interrupts.cpp:27 93 {*movqi_internal}
     (nil))
(insn 5 3 7 2 (set (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 csSelectorOffset+0 S2 A32])
        (reg:HI 2 cx [104])) interrupts.cpp:27 92 {*movhi_internal}
     (nil))
(insn 7 5 9 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 DescriptorPriviligeLevel+0 S1 A32])
        (reg:QI 1 dx [105])) interrupts.cpp:27 93 {*movqi_internal}
     (nil))
(insn 9 7 10 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 DescriptorType+0 S1 A32])
        (reg:QI 0 ax [106])) interrupts.cpp:27 93 {*movqi_internal}
     (nil))
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -5 [0xfffffffffffffffb])) [0 IDT_DESC_PRESENT+0 S1 A8])
        (const_int -128 [0xffffffffffffff80])) interrupts.cpp:28 93 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:87 D.1635 ] [87])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:29 138 {*zero_extendqisi2}
     (nil))
(insn 15 14 16 2 (set (reg:SI 1 dx [orig:88 D.1635 ] [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 handler+0 S4 A32])) interrupts.cpp:29 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:HI 1 dx [orig:89 D.1636 ] [89])
        (reg:HI 1 dx [orig:88 D.1635 ] [88])) interrupts.cpp:29 92 {*movhi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/j:HI (plus:SI (mult:SI (reg:SI 0 ax [orig:87 D.1635 ] [87])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("_ZN16InterruptManager24interruptDescriptorTableE") [flags 0x2]  <var_decl 0x7f920469ae10 interruptDescriptorTable>)) [0 interruptDescriptorTable[_3].handlerAddressLowBits+0 S2 A64])
        (reg:HI 1 dx [orig:89 D.1636 ] [89])) interrupts.cpp:29 92 {*movhi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [orig:90 D.1635 ] [90])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:30 138 {*zero_extendqisi2}
     (nil))
(insn 19 18 20 2 (set (reg:SI 1 dx [orig:91 D.1637 ] [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 handler+0 S4 A32])) interrupts.cpp:30 90 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 1 dx [orig:92 D.1637 ] [92])
                (lshiftrt:SI (reg:SI 1 dx [orig:91 D.1637 ] [91])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:30 544 {*lshrsi3_1}
     (nil))
(insn 21 20 22 2 (set (reg:HI 1 dx [orig:93 D.1636 ] [93])
        (reg:HI 1 dx [orig:92 D.1637 ] [92])) interrupts.cpp:30 92 {*movhi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/j:HI (plus:SI (mult:SI (reg:SI 0 ax [orig:90 D.1635 ] [90])
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("_ZN16InterruptManager24interruptDescriptorTableE") [flags 0x2]  <var_decl 0x7f920469ae10 interruptDescriptorTable>)
                        (const_int 6 [0x6])))) [0 interruptDescriptorTable[_9].handlerAddressHighBits+0 S2 A16])
        (reg:HI 1 dx [orig:93 D.1636 ] [93])) interrupts.cpp:30 92 {*movhi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 0 ax [orig:94 D.1635 ] [94])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:31 138 {*zero_extendqisi2}
     (nil))
(insn 24 23 25 2 (set (reg:HI 1 dx [107])
        (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 csSelectorOffset+0 S2 A32])) interrupts.cpp:31 92 {*movhi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/j:HI (plus:SI (mult:SI (reg:SI 0 ax [orig:94 D.1635 ] [94])
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("_ZN16InterruptManager24interruptDescriptorTableE") [flags 0x2]  <var_decl 0x7f920469ae10 interruptDescriptorTable>)
                        (const_int 2 [0x2])))) [0 interruptDescriptorTable[_14].gdt_cs_selector+0 S2 A16])
        (reg:HI 1 dx [107])) interrupts.cpp:31 92 {*movhi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:95 D.1635 ] [95])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:32 138 {*zero_extendqisi2}
     (nil))
(insn 27 26 28 2 (set (reg:SI 1 dx [orig:96 D.1635 ] [96])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 DescriptorPriviligeLevel+0 S1 A32]))) interrupts.cpp:32 138 {*zero_extendqisi2}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:SI 1 dx [orig:97 D.1635 ] [97])
                (and:SI (reg:SI 1 dx [orig:96 D.1635 ] [96])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:32 381 {*andsi_1}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg:SI 1 dx [orig:98 D.1635 ] [98])
                (ashift:SI (reg:SI 1 dx [orig:97 D.1635 ] [97])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:32 511 {*ashlsi3_1}
     (nil))
(insn 30 29 31 2 (set (reg:QI 1 dx [orig:99 D.1638 ] [99])
        (reg:QI 1 dx [orig:98 D.1635 ] [98])) interrupts.cpp:32 93 {*movqi_internal}
     (nil))
(insn 31 30 32 2 (parallel [
            (set (reg:QI 1 dx [orig:100 D.1638 ] [100])
                (ior:QI (reg:QI 1 dx [orig:99 D.1638 ] [99])
                    (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 DescriptorType+0 S1 A32])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:32 405 {*iorqi_1}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:QI 1 dx [orig:101 D.1638 ] [101])
                (ior:QI (reg:QI 1 dx [orig:100 D.1638 ] [100])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:32 405 {*iorqi_1}
     (nil))
(insn 33 32 34 2 (set (mem/j:QI (plus:SI (mult:SI (reg:SI 0 ax [orig:95 D.1635 ] [95])
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("_ZN16InterruptManager24interruptDescriptorTableE") [flags 0x2]  <var_decl 0x7f920469ae10 interruptDescriptorTable>)
                        (const_int 5 [0x5])))) [0 interruptDescriptorTable[_17].access+0 S1 A8])
        (reg:QI 1 dx [orig:101 D.1638 ] [101])) interrupts.cpp:32 93 {*movqi_internal}
     (nil))
(insn 34 33 35 2 (set (reg:SI 0 ax [orig:102 D.1635 ] [102])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:33 138 {*zero_extendqisi2}
     (nil))
(insn 35 34 38 2 (set (mem/j:QI (plus:SI (mult:SI (reg:SI 0 ax [orig:102 D.1635 ] [102])
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("_ZN16InterruptManager24interruptDescriptorTableE") [flags 0x2]  <var_decl 0x7f920469ae10 interruptDescriptorTable>)
                        (const_int 4 [0x4])))) [0 interruptDescriptorTable[_27].reserved+0 S1 A32])
        (const_int 0 [0])) interrupts.cpp:33 93 {*movqi_internal}
     (nil))
(insn 38 35 39 2 (const_int 0 [0]) interrupts.cpp:34 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 39 38 0 NOTE_INSN_DELETED)

;; Function InterruptManager::InterruptManager(GlobalDescriptorTable*) (_ZN16InterruptManagerC2EP21GlobalDescriptorTable, funcdef_no=16, decl_uid=1373, cgraph_uid=16, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 6:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 38:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 39:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) qm {*zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-20)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-28)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) lBwBz {*call} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) rn {*addhi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-20)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-28)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) lBwBz {*call} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-20)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-28)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) lBwBz {*call} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) r  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =rm  (1) 0  (2) cI {*ashlhi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 156:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) m

********** Pseudo live ranges #1: **********

  BB 5
   Insn 163: point = 0
   Insn 160: point = 0
   Insn 159: point = 0
   Insn 158: point = 1
   Insn 157: point = 2
   Insn 156: point = 3
   Insn 155: point = 5
   Insn 154: point = 7
   Insn 153: point = 8
   Insn 152: point = 8
   Insn 151: point = 8
   Insn 150: point = 9
   Insn 149: point = 9
   Insn 148: point = 9
   Insn 147: point = 11
   Insn 146: point = 12
   Insn 145: point = 12
   Insn 144: point = 12
   Insn 143: point = 13
   Insn 142: point = 13
   Insn 141: point = 13
   Insn 140: point = 15
   Insn 139: point = 16
   Insn 138: point = 16
   Insn 137: point = 16
   Insn 136: point = 17
   Insn 135: point = 17
   Insn 134: point = 17
   Insn 133: point = 19
   Insn 132: point = 20
   Insn 131: point = 20
   Insn 130: point = 20
   Insn 129: point = 21
   Insn 128: point = 21
   Insn 127: point = 21
   Insn 126: point = 23
   Insn 125: point = 24
   Insn 124: point = 24
   Insn 123: point = 24
   Insn 122: point = 25
   Insn 121: point = 25
   Insn 120: point = 25
   Insn 119: point = 27
   Insn 118: point = 28
   Insn 117: point = 28
   Insn 116: point = 28
   Insn 115: point = 29
   Insn 114: point = 29
   Insn 113: point = 29
   Insn 112: point = 31
   Insn 111: point = 32
   Insn 110: point = 32
   Insn 109: point = 32
   Insn 108: point = 33
   Insn 107: point = 33
   Insn 106: point = 33
   Insn 105: point = 35
   Insn 104: point = 36
   Insn 103: point = 36
   Insn 102: point = 36
   Insn 101: point = 37
   Insn 100: point = 37
   Insn 99: point = 37
   Insn 98: point = 39
   Insn 97: point = 40
   Insn 96: point = 40
   Insn 95: point = 40
   Insn 94: point = 41
   Insn 93: point = 41
   Insn 92: point = 41
   Insn 91: point = 43
   Insn 90: point = 44
   Insn 89: point = 44
   Insn 88: point = 44
   Insn 87: point = 45
   Insn 86: point = 45
   Insn 85: point = 45
   Insn 84: point = 47
   Insn 83: point = 48
   Insn 82: point = 48
   Insn 81: point = 48
   Insn 80: point = 48
   Insn 79: point = 49
   Insn 78: point = 49
   Insn 77: point = 49
   Insn 76: point = 49
   Insn 75: point = 49
   Insn 74: point = 50
   Insn 73: point = 50
   Insn 72: point = 50
   Insn 71: point = 50
   Insn 70: point = 51
   Insn 69: point = 51
   Insn 68: point = 51
   Insn 67: point = 51
   Insn 66: point = 51
  BB 3
   Insn 43: point = 52
   Insn 42: point = 52
  BB 4
   Insn 164: point = 52
   Insn 60: point = 52
   Insn 59: point = 52
   Insn 58: point = 52
   Insn 57: point = 52
   Insn 56: point = 53
   Insn 55: point = 54
   Insn 54: point = 54
   Insn 53: point = 54
   Insn 52: point = 54
   Insn 51: point = 54
   Insn 50: point = 56
   Insn 49: point = 58
   Insn 48: point = 59
   Insn 47: point = 60
   Insn 46: point = 61
   Insn 45: point = 62
  BB 2
   Insn 40: point = 63
   Insn 39: point = 63
   Insn 38: point = 63
   Insn 37: point = 64
   Insn 36: point = 65
   Insn 35: point = 65
   Insn 34: point = 65
   Insn 33: point = 65
   Insn 32: point = 65
   Insn 31: point = 65
   Insn 30: point = 65
   Insn 29: point = 66
   Insn 28: point = 66
   Insn 27: point = 66
   Insn 26: point = 68
   Insn 25: point = 69
   Insn 24: point = 69
   Insn 23: point = 69
   Insn 22: point = 70
   Insn 21: point = 70
   Insn 20: point = 70
   Insn 19: point = 72
   Insn 18: point = 73
   Insn 17: point = 73
   Insn 16: point = 73
   Insn 15: point = 74
   Insn 14: point = 74
   Insn 13: point = 74
   Insn 12: point = 76
   Insn 11: point = 77
   Insn 10: point = 77
   Insn 9: point = 77
   Insn 8: point = 78
   Insn 7: point = 78
   Insn 6: point = 78
   Insn 5: point = 80
Compressing live ranges: from 81 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 13
changing reg in insn 16
changing reg in insn 20
changing reg in insn 23
changing reg in insn 27
changing reg in insn 30
changing reg in insn 37
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 57
changing reg in insn 66
changing reg in insn 71
changing reg in insn 75
changing reg in insn 80
changing reg in insn 85
changing reg in insn 88
changing reg in insn 92
changing reg in insn 95
changing reg in insn 99
changing reg in insn 102
changing reg in insn 106
changing reg in insn 109
changing reg in insn 113
changing reg in insn 116
changing reg in insn 120
changing reg in insn 123
changing reg in insn 127
changing reg in insn 130
changing reg in insn 134
changing reg in insn 137
changing reg in insn 141
changing reg in insn 144
changing reg in insn 148
changing reg in insn 151
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 5
changing reg in insn 6
changing reg in insn 12
changing reg in insn 13
changing reg in insn 19
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 84
changing reg in insn 85
changing reg in insn 91
changing reg in insn 92
changing reg in insn 98
changing reg in insn 99
changing reg in insn 105
changing reg in insn 106
changing reg in insn 112
changing reg in insn 113
changing reg in insn 119
changing reg in insn 120
changing reg in insn 126
changing reg in insn 127
changing reg in insn 133
changing reg in insn 134
changing reg in insn 140
changing reg in insn 141
changing reg in insn 147
changing reg in insn 148
deleting insn with uid = 37.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 145.
verify found no changes in insn with uid = 152.


InterruptManager::InterruptManager(GlobalDescriptorTable*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 17[flags] 18[fpsr]
;;  ref usage 	r0={57d,39u} r1={21d,2u} r2={19d} r6={1d,35u} r7={81d,139u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r16={14e} r17={73d,1u} r18={19d} r19={18d} r20={1d,1u} r21={18d} r22={18d} r23={18d} r24={18d} r25={18d} r26={18d} r27={18d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={18d} r38={18d} r39={18d} r40={18d} r41={18d} r42={18d} r43={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} 
;;    total ref usage 1745{1514d,217u,14e} in 150{132 regular + 18 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 112 113 114 115
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:40 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg/f:SI 0 ax [orig:87 D.1639 ] [87])
                (plus:SI (reg/f:SI 0 ax [112])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1024 [0x400]))
        (nil)))
(insn 7 6 8 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 8 7 9 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 32 [0x20])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 9 8 10 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:87 D.1639 ] [87])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlowC1Et") [flags 0x41]  <function_decl 0x7f920468dd80 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:40 659 {*call}
     (nil)
    (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 12 11 13 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:40 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 0 ax [orig:88 D.1639 ] [88])
                (plus:SI (reg/f:SI 0 ax [113])
                    (const_int 1032 [0x408])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1032 [0x408]))
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 15 14 16 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 160 [0xa0])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 16 15 17 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.1639 ] [88])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlowC1Et") [flags 0x41]  <function_decl 0x7f920468dd80 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:40 659 {*call}
     (nil)
    (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 19 18 20 2 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:40 90 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg/f:SI 0 ax [orig:89 D.1639 ] [89])
                (plus:SI (reg/f:SI 0 ax [114])
                    (const_int 1040 [0x410])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1040 [0x410]))
        (nil)))
(insn 21 20 22 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 22 21 23 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 33 [0x21])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 23 22 24 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:89 D.1639 ] [89])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 24 23 25 2 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlowC1Et") [flags 0x41]  <function_decl 0x7f920468dd80 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:40 659 {*call}
     (nil)
    (nil))
(insn 25 24 26 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 26 25 27 2 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:40 90 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg/f:SI 0 ax [orig:90 D.1639 ] [90])
                (plus:SI (reg/f:SI 0 ax [115])
                    (const_int 1048 [0x418])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1048 [0x418]))
        (nil)))
(insn 28 27 29 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 29 28 30 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 161 [0xa1])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 30 29 31 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:90 D.1639 ] [90])) interrupts.cpp:40 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 31 30 32 2 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlowC1Et") [flags 0x41]  <function_decl 0x7f920468dd80 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:40 659 {*call}
     (nil)
    (nil))
(insn 32 31 33 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:40 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 33 32 34 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:43 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 34 33 35 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gdt+0 S4 A32])) interrupts.cpp:43 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 35 34 36 2 (set (reg:HI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN21GlobalDescriptorTable20GetCodeSegmentOffsetEv") [flags 0x41]  <function_decl 0x7f92046825e8 GetCodeSegmentOffset>) [0 GetCodeSegmentOffset S1 A8])
            (const_int 16 [0x10]))) interrupts.cpp:43 668 {*call_value}
     (nil)
    (nil))
(insn 36 35 38 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:43 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 38 36 39 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -11 [0xfffffffffffffff5])) [0 CodeSegment+0 S1 A8])
        (reg:QI 0 ax [orig:91 D.1640 ] [91])) interrupts.cpp:43 93 {*movqi_internal}
     (nil))
(insn 39 38 40 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 IDT_INTERRUPT_GATE+0 S1 A8])
        (const_int 14 [0xe])) interrupts.cpp:44 93 {*movqi_internal}
     (nil))
(insn 40 39 61 2 (set (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0 i+0 S2 A16])
        (const_int 0 [0])) interrupts.cpp:45 92 {*movhi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 61 40 41 3 10 "" [1 uses])
(note 41 61 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                    (const_int -10 [0xfffffffffffffff6])) [0 i+0 S2 A16])
            (const_int 255 [0xff]))) interrupts.cpp:45 6 {*cmphi_1}
     (nil))
(jump_insn 43 42 44 3 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) interrupts.cpp:45 612 {*jcc_1}
     (nil)
 -> 64)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 95 116 117
(note 44 43 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 4 (set (reg:SI 1 dx [orig:92 D.1641 ] [92])
        (zero_extend:SI (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                    (const_int -10 [0xfffffffffffffff6])) [0 i+0 S2 A16]))) interrupts.cpp:46 139 {*zero_extendhisi2}
     (nil))
(insn 46 45 47 4 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:46 90 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (mem/f/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:92 D.1641 ] [92])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [116])) [0 this_3(D)->handlers S4 A32])
        (const_int 0 [0])) interrupts.cpp:46 90 {*movsi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SI 1 dx [orig:93 D.1641 ] [93])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -11 [0xfffffffffffffff5])) [0 CodeSegment+0 S1 A8]))) interrupts.cpp:47 138 {*zero_extendqisi2}
     (nil))
(insn 49 48 50 4 (set (reg:HI 0 ax [117])
        (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0 i+0 S2 A16])) interrupts.cpp:47 92 {*movhi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:QI 0 ax [orig:94 D.1642 ] [94])
        (reg:QI 0 ax [117])) interrupts.cpp:47 93 {*movqi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:SI 0 ax [orig:95 D.1641 ] [95])
        (zero_extend:SI (reg:QI 0 ax [orig:94 D.1642 ] [94]))) interrupts.cpp:47 138 {*zero_extendqisi2}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:47 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 53 52 54 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 14 [0xe])) interrupts.cpp:47 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 54 53 55 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) interrupts.cpp:47 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 20 [0x14])
        (nil)))
(insn 55 54 56 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (symbol_ref:SI ("_ZN16InterruptManager22IgnoreInterruptRequestEv") [flags 0x41]  <function_decl 0x7f92046a7510 IgnoreInterruptRequest>)) interrupts.cpp:47 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 56 55 57 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg:SI 1 dx [orig:93 D.1641 ] [93])) interrupts.cpp:47 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 28 [0x1c])
        (nil)))
(insn 57 56 58 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg:SI 0 ax [orig:95 D.1641 ] [95])) interrupts.cpp:47 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(call_insn 58 57 59 4 (call (mem:QI (symbol_ref:SI ("_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh") [flags 0x3]  <function_decl 0x7f920469cd80 SetInterruptDescriptorTableEntry>) [0 SetInterruptDescriptorTableEntry S1 A8])
        (const_int 32 [0x20])) interrupts.cpp:47 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 59 58 60 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:47 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 60 59 164 4 (parallel [
            (set (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                        (const_int -10 [0xfffffffffffffff6])) [0 i+0 S2 A16])
                (plus:HI (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                            (const_int -10 [0xfffffffffffffff6])) [0 i+0 S2 A16])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:45 220 {*addhi_1}
     (nil))
(jump_insn 164 60 165 4 (set (pc)
        (label_ref 61)) interrupts.cpp:45 654 {jump}
     (nil)
 -> 61)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 165 164 64)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 118 119 120 121 122 123 124 125 126 127
(code_label 64 165 65 5 9 "" [1 uses])
(note 65 64 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 5 (set (reg:SI 0 ax [orig:96 D.1641 ] [96])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -11 [0xfffffffffffffff5])) [0 CodeSegment+0 S1 A8]))) interrupts.cpp:49 138 {*zero_extendqisi2}
     (nil))
(insn 67 66 68 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:49 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 68 67 69 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 14 [0xe])) interrupts.cpp:49 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 69 68 70 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) interrupts.cpp:49 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 20 [0x14])
        (nil)))
(insn 70 69 71 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (symbol_ref:SI ("_ZN16InterruptManager26handleInterruptRequest0x00Ev") [flags 0x41]  <function_decl 0x7f92046a7360 handleInterruptRequest0x00>)) interrupts.cpp:49 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 71 70 72 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg:SI 0 ax [orig:96 D.1641 ] [96])) interrupts.cpp:49 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 28 [0x1c])
        (nil)))
(insn 72 71 73 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 32 [0x20])) interrupts.cpp:49 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(call_insn 73 72 74 5 (call (mem:QI (symbol_ref:SI ("_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh") [flags 0x3]  <function_decl 0x7f920469cd80 SetInterruptDescriptorTableEntry>) [0 SetInterruptDescriptorTableEntry S1 A8])
        (const_int 32 [0x20])) interrupts.cpp:49 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 74 73 75 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:49 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 75 74 76 5 (set (reg:SI 0 ax [orig:97 D.1641 ] [97])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -11 [0xfffffffffffffff5])) [0 CodeSegment+0 S1 A8]))) interrupts.cpp:50 138 {*zero_extendqisi2}
     (nil))
(insn 76 75 77 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:50 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 77 76 78 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 14 [0xe])) interrupts.cpp:50 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 78 77 79 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) interrupts.cpp:50 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 20 [0x14])
        (nil)))
(insn 79 78 80 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (symbol_ref:SI ("_ZN16InterruptManager26handleInterruptRequest0x01Ev") [flags 0x41]  <function_decl 0x7f92046a7438 handleInterruptRequest0x01>)) interrupts.cpp:50 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 80 79 81 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg:SI 0 ax [orig:97 D.1641 ] [97])) interrupts.cpp:50 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 28 [0x1c])
        (nil)))
(insn 81 80 82 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 33 [0x21])) interrupts.cpp:50 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(call_insn 82 81 83 5 (call (mem:QI (symbol_ref:SI ("_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh") [flags 0x3]  <function_decl 0x7f920469cd80 SetInterruptDescriptorTableEntry>) [0 SetInterruptDescriptorTableEntry S1 A8])
        (const_int 32 [0x20])) interrupts.cpp:50 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 83 82 84 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:50 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 84 83 85 5 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:52 90 {*movsi_internal}
     (nil))
(insn 85 84 86 5 (parallel [
            (set (reg/f:SI 0 ax [orig:98 D.1639 ] [98])
                (plus:SI (reg/f:SI 0 ax [118])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:52 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1024 [0x400]))
        (nil)))
(insn 86 85 87 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:52 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 87 86 88 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 17 [0x11])) interrupts.cpp:52 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 88 87 89 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:98 D.1639 ] [98])) interrupts.cpp:52 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 89 88 90 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:52 659 {*call}
     (nil)
    (nil))
(insn 90 89 91 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:52 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 91 90 92 5 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:53 90 {*movsi_internal}
     (nil))
(insn 92 91 93 5 (parallel [
            (set (reg/f:SI 0 ax [orig:99 D.1639 ] [99])
                (plus:SI (reg/f:SI 0 ax [119])
                    (const_int 1032 [0x408])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:53 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1032 [0x408]))
        (nil)))
(insn 93 92 94 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:53 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 94 93 95 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 17 [0x11])) interrupts.cpp:53 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 95 94 96 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:99 D.1639 ] [99])) interrupts.cpp:53 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 96 95 97 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:53 659 {*call}
     (nil)
    (nil))
(insn 97 96 98 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:53 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 98 97 99 5 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:55 90 {*movsi_internal}
     (nil))
(insn 99 98 100 5 (parallel [
            (set (reg/f:SI 0 ax [orig:100 D.1639 ] [100])
                (plus:SI (reg/f:SI 0 ax [120])
                    (const_int 1040 [0x410])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:55 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1040 [0x410]))
        (nil)))
(insn 100 99 101 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:55 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 101 100 102 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 32 [0x20])) interrupts.cpp:55 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 102 101 103 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:100 D.1639 ] [100])) interrupts.cpp:55 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 103 102 104 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:55 659 {*call}
     (nil)
    (nil))
(insn 104 103 105 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:55 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 105 104 106 5 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:56 90 {*movsi_internal}
     (nil))
(insn 106 105 107 5 (parallel [
            (set (reg/f:SI 0 ax [orig:101 D.1639 ] [101])
                (plus:SI (reg/f:SI 0 ax [121])
                    (const_int 1048 [0x418])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:56 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1048 [0x418]))
        (nil)))
(insn 107 106 108 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:56 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 108 107 109 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 40 [0x28])) interrupts.cpp:56 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 109 108 110 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:101 D.1639 ] [101])) interrupts.cpp:56 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 110 109 111 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:56 659 {*call}
     (nil)
    (nil))
(insn 111 110 112 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:56 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 112 111 113 5 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:58 90 {*movsi_internal}
     (nil))
(insn 113 112 114 5 (parallel [
            (set (reg/f:SI 0 ax [orig:102 D.1639 ] [102])
                (plus:SI (reg/f:SI 0 ax [122])
                    (const_int 1040 [0x410])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:58 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1040 [0x410]))
        (nil)))
(insn 114 113 115 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:58 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 115 114 116 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 4 [0x4])) interrupts.cpp:58 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 116 115 117 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:102 D.1639 ] [102])) interrupts.cpp:58 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 117 116 118 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:58 659 {*call}
     (nil)
    (nil))
(insn 118 117 119 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:58 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 119 118 120 5 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:59 90 {*movsi_internal}
     (nil))
(insn 120 119 121 5 (parallel [
            (set (reg/f:SI 0 ax [orig:103 D.1639 ] [103])
                (plus:SI (reg/f:SI 0 ax [123])
                    (const_int 1048 [0x418])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:59 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1048 [0x418]))
        (nil)))
(insn 121 120 122 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:59 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 122 121 123 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 2 [0x2])) interrupts.cpp:59 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 123 122 124 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:103 D.1639 ] [103])) interrupts.cpp:59 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 124 123 125 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:59 659 {*call}
     (nil)
    (nil))
(insn 125 124 126 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:59 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 126 125 127 5 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:61 90 {*movsi_internal}
     (nil))
(insn 127 126 128 5 (parallel [
            (set (reg/f:SI 0 ax [orig:104 D.1639 ] [104])
                (plus:SI (reg/f:SI 0 ax [124])
                    (const_int 1040 [0x410])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:61 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1040 [0x410]))
        (nil)))
(insn 128 127 129 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:61 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 129 128 130 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 1 [0x1])) interrupts.cpp:61 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 130 129 131 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:104 D.1639 ] [104])) interrupts.cpp:61 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 131 130 132 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:61 659 {*call}
     (nil)
    (nil))
(insn 132 131 133 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:61 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 133 132 134 5 (set (reg/f:SI 0 ax [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:62 90 {*movsi_internal}
     (nil))
(insn 134 133 135 5 (parallel [
            (set (reg/f:SI 0 ax [orig:105 D.1639 ] [105])
                (plus:SI (reg/f:SI 0 ax [125])
                    (const_int 1048 [0x418])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:62 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1048 [0x418]))
        (nil)))
(insn 135 134 136 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:62 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 136 135 137 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 1 [0x1])) interrupts.cpp:62 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 137 136 138 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:105 D.1639 ] [105])) interrupts.cpp:62 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 138 137 139 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:62 659 {*call}
     (nil)
    (nil))
(insn 139 138 140 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:62 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 140 139 141 5 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:64 90 {*movsi_internal}
     (nil))
(insn 141 140 142 5 (parallel [
            (set (reg/f:SI 0 ax [orig:106 D.1639 ] [106])
                (plus:SI (reg/f:SI 0 ax [126])
                    (const_int 1040 [0x410])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:64 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1040 [0x410]))
        (nil)))
(insn 142 141 143 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:64 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 143 142 144 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) interrupts.cpp:64 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 144 143 145 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:106 D.1639 ] [106])) interrupts.cpp:64 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 145 144 146 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:64 659 {*call}
     (nil)
    (nil))
(insn 146 145 147 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:64 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 147 146 148 5 (set (reg/f:SI 0 ax [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:65 90 {*movsi_internal}
     (nil))
(insn 148 147 149 5 (parallel [
            (set (reg/f:SI 0 ax [orig:107 D.1639 ] [107])
                (plus:SI (reg/f:SI 0 ax [127])
                    (const_int 1048 [0x418])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:65 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1048 [0x418]))
        (nil)))
(insn 149 148 150 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:65 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 150 149 151 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) interrupts.cpp:65 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 151 150 152 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:107 D.1639 ] [107])) interrupts.cpp:65 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 152 151 153 5 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:65 659 {*call}
     (nil)
    (nil))
(insn 153 152 154 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:65 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 154 153 155 5 (set (reg:HI 0 ax [orig:108 D.1640 ] [108])
        (const_int 8 [0x8])) interrupts.cpp:69 92 {*movhi_internal}
     (nil))
(insn 155 154 156 5 (parallel [
            (set (reg:HI 0 ax [orig:109 D.1640 ] [109])
                (ashift:HI (reg:HI 0 ax [orig:108 D.1640 ] [108])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:69 515 {*ashlhi3_1}
     (nil))
(insn 156 155 157 5 (parallel [
            (set (reg:HI 0 ax [orig:110 D.1640 ] [110])
                (plus:HI (reg:HI 0 ax [orig:109 D.1640 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:69 220 {*addhi_1}
     (nil))
(insn 157 156 158 5 (set (mem/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 idt.size+0 S2 A16])
        (reg:HI 0 ax [orig:110 D.1640 ] [110])) interrupts.cpp:69 92 {*movhi_internal}
     (nil))
(insn 158 157 159 5 (set (reg:SI 0 ax [orig:111 D.1643 ] [111])
        (symbol_ref:SI ("_ZN16InterruptManager24interruptDescriptorTableE") [flags 0x2]  <var_decl 0x7f920469ae10 interruptDescriptorTable>)) interrupts.cpp:70 90 {*movsi_internal}
     (nil))
(insn 159 158 160 5 (set (mem/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 idt.base+0 S4 A16])
        (reg:SI 0 ax [orig:111 D.1643 ] [111])) interrupts.cpp:70 90 {*movsi_internal}
     (nil))
(insn 160 159 163 5 (parallel [
            (asm_operands/v ("lidt %0") ("") 0 [
                    (mem/c:BLK (plus:SI (reg/f:SI 6 bp)
                            (const_int -18 [0xffffffffffffffee])) [0 idt+0 S6 A16])
                ]
                 [
                    (asm_input:BLK ("m") interrupts.cpp:71)
                ]
                 [] interrupts.cpp:71)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) interrupts.cpp:71 -1
     (nil))
(insn 163 160 166 5 (const_int 0 [0]) interrupts.cpp:72 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 166 163 0 NOTE_INSN_DELETED)

;; Function void InterruptManager::Activate() (_ZN16InterruptManager8ActivateEv, funcdef_no=18, decl_uid=1359, cgraph_uid=18, symbol_order=20)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 21: point = 0
   Insn 18: point = 0
   Insn 17: point = 0
   Insn 16: point = 1
  BB 3
   Insn 13: point = 2
   Insn 12: point = 2
   Insn 11: point = 2
   Insn 10: point = 3
   Insn 9: point = 3
  BB 2
   Insn 7: point = 4
   Insn 6: point = 4
   Insn 5: point = 5
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


void InterruptManager::Activate()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={5d,3u} r1={2d} r2={2d} r6={1d,5u} r7={4d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,1u} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 109{89d,20u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:87 D.1644 ] [87])
        (mem/f/c:SI (symbol_ref:SI ("_ZN16InterruptManager22ActiveInterruptManagerE") [flags 0x2]  <var_decl 0x7f920469ab40 ActiveInterruptManager>) [0 ActiveInterruptManager+0 S4 A32])) interrupts.cpp:75 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:87 D.1644 ] [87])
            (const_int 0 [0]))) interrupts.cpp:75 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) interrupts.cpp:75 612 {*jcc_1}
     (nil)
 -> 14)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 0 ax [orig:88 D.1644 ] [88])
        (mem/f/c:SI (symbol_ref:SI ("_ZN16InterruptManager22ActiveInterruptManagerE") [flags 0x2]  <var_decl 0x7f920469ab40 ActiveInterruptManager>) [0 ActiveInterruptManager+0 S4 A32])) interrupts.cpp:76 90 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:76 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 11 10 12 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.1644 ] [88])) interrupts.cpp:76 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 12 11 13 3 (call (mem:QI (symbol_ref:SI ("_ZN16InterruptManager10DeactivateEv") [flags 0x3]  <function_decl 0x7f92046a7288 Deactivate>) [0 Deactivate S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:76 659 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:76 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89
(code_label 14 13 15 4 12 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:77 90 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (mem/f/c:SI (symbol_ref:SI ("_ZN16InterruptManager22ActiveInterruptManagerE") [flags 0x2]  <var_decl 0x7f920469ab40 ActiveInterruptManager>) [0 ActiveInterruptManager+0 S4 A32])
        (reg/f:SI 0 ax [89])) interrupts.cpp:77 90 {*movsi_internal}
     (nil))
(insn 18 17 21 4 (asm_input/v ("sti") interrupts.cpp:78) interrupts.cpp:78 -1
     (nil))
(insn 21 18 22 4 (const_int 0 [0]) interrupts.cpp:79 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 21 0 NOTE_INSN_DELETED)

;; Function void InterruptManager::Deactivate() (_ZN16InterruptManager10DeactivateEv, funcdef_no=19, decl_uid=1361, cgraph_uid=19, symbol_order=21)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 19: point = 0
  BB 3
   Insn 10: point = 0
   Insn 9: point = 0
  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 5: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 6
starting the processing of deferred insns
ending the processing of deferred insns


void InterruptManager::Deactivate()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={2d,1u} r1={1d} r2={1d} r6={1d,6u} r7={1d,5u} r17={1d,1u} r20={1d,1u} 
;;    total ref usage 22{8d,14u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:87 D.1645 ] [87])
        (mem/f/c:SI (symbol_ref:SI ("_ZN16InterruptManager22ActiveInterruptManagerE") [flags 0x2]  <var_decl 0x7f920469ab40 ActiveInterruptManager>) [0 ActiveInterruptManager+0 S4 A32])) interrupts.cpp:83 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:87 D.1645 ] [87])
            (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 this+0 S4 A32]))) interrupts.cpp:83 7 {*cmpsi_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 18)
            (pc))) interrupts.cpp:83 612 {*jcc_1}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (mem/f/c:SI (symbol_ref:SI ("_ZN16InterruptManager22ActiveInterruptManagerE") [flags 0x2]  <var_decl 0x7f920469ab40 ActiveInterruptManager>) [0 ActiveInterruptManager+0 S4 A32])
        (const_int 0 [0])) interrupts.cpp:84 90 {*movsi_internal}
     (nil))
(insn 10 9 18 3 (asm_input/v ("cli") interrupts.cpp:85) interrupts.cpp:85 -1
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (NEW, RTL, MODIFIED)
;;  pred:       2
;;              3 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 18 10 17 5 15 "" [1 uses])
(note 17 18 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 17 13 5 (const_int 0 [0]) interrupts.cpp:87 684 {nop}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 13 19 14 4 13 "" [0 uses])
(note 14 13 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 14 0 NOTE_INSN_DELETED)

;; Function static uint32_t InterruptManager::handleInterrupt(uint8_t, uint32_t) (_ZN16InterruptManager15handleInterruptEhj, funcdef_no=20, decl_uid=1352, cgraph_uid=20, symbol_order=22)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 3:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0
   Insn 31: point = 0
   Insn 27: point = 1
  BB 3
   Insn 34: point = 4
   Insn 19: point = 4
   Insn 18: point = 5
   Insn 17: point = 5
   Insn 16: point = 5
   Insn 15: point = 6
   Insn 14: point = 7
   Insn 13: point = 7
   Insn 12: point = 7
   Insn 11: point = 8
  BB 4
   Insn 24: point = 9
  BB 2
   Insn 9: point = 10
   Insn 8: point = 10
   Insn 7: point = 11
   Insn 3: point = 12
   Insn 2: point = 13
Compressing live ranges: from 14 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 24
changing reg in insn 19
changing reg in insn 27
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 15
changing reg in insn 12
changing reg in insn 16
changing reg in insn 27
changing reg in insn 31
changing reg in insn 2
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.


static uint32_t InterruptManager::handleInterrupt(uint8_t, uint32_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r6={1d,10u} r7={6d,13u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,1u} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 130{96d,34u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 92
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 interruptNumber+0 S4 A32])) interrupts.cpp:89 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 interruptNumber+0 S1 A32])
        (reg:QI 0 ax [92])) interrupts.cpp:89 93 {*movqi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 0 ax [orig:88 D.1647 ] [88])
        (mem/f/c:SI (symbol_ref:SI ("_ZN16InterruptManager22ActiveInterruptManagerE") [flags 0x2]  <var_decl 0x7f920469ab40 ActiveInterruptManager>) [0 ActiveInterruptManager+0 S4 A32])) interrupts.cpp:90 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:88 D.1647 ] [88])
            (const_int 0 [0]))) interrupts.cpp:90 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) interrupts.cpp:90 612 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 89 90
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 1 dx [orig:89 D.1648 ] [89])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:91 138 {*zero_extendqisi2}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 0 ax [orig:90 D.1647 ] [90])
        (mem/f/c:SI (symbol_ref:SI ("_ZN16InterruptManager22ActiveInterruptManagerE") [flags 0x2]  <var_decl 0x7f920469ab40 ActiveInterruptManager>) [0 ActiveInterruptManager+0 S4 A32])) interrupts.cpp:91 90 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:91 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 14 13 15 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 esp+0 S4 A32])) interrupts.cpp:91 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 15 14 16 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg:SI 1 dx [orig:89 D.1648 ] [89])) interrupts.cpp:91 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 16 15 17 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:90 D.1647 ] [90])) interrupts.cpp:91 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 17 16 18 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN16InterruptManager17doHandleInterruptEhj") [flags 0x3]  <function_decl 0x7f92046a75e8 doHandleInterrupt>) [0 doHandleInterrupt S1 A8])
            (const_int 16 [0x10]))) interrupts.cpp:91 668 {*call_value}
     (nil)
    (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:91 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 19 18 34 3 (set (reg:SI 0 ax [orig:87 D.1646 ] [87])
        (reg:SI 0 ax)) interrupts.cpp:91 90 {*movsi_internal}
     (nil))
(jump_insn 34 19 35 3 (set (pc)
        (label_ref 25)) interrupts.cpp:91 654 {jump}
     (nil)
 -> 25)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 35 34 22)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 22 35 23 4 17 "" [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 0 ax [orig:87 D.1646 ] [87])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 esp+0 S4 A32])) interrupts.cpp:93 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 91
(code_label 25 24 26 5 18 "" [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 31 5 (set (reg:SI 0 ax [orig:91 <retval> ] [91])
        (reg:SI 0 ax [orig:87 D.1646 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 31 27 32 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:91 <retval> ] [91])) interrupts.cpp:94 90 {*movsi_internal}
     (nil))
(insn 32 31 36 5 (use (reg/i:SI 0 ax)) interrupts.cpp:94 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 36 32 0 NOTE_INSN_DELETED)

;; Function uint32_t InterruptManager::doHandleInterrupt(uint8_t, uint32_t) (_ZN16InterruptManager17doHandleInterruptEhj, funcdef_no=21, decl_uid=1368, cgraph_uid=21, symbol_order=23)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 3:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 42:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =qm  (1) 0  (2) cI {*lshrqi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 48:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=15,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=125 from oldreg=104, assigning class GENERAL_REGS to r125
   52: {r125:SI=r125:SI&0xf;clobber flags:CC;}
      REG_DEAD r103:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  101: r125:SI=r103:SI
    Inserting insn reload after:
  102: r104:SI=r125:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 56:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 96: point = 0
   Insn 95: point = 0
   Insn 91: point = 1
   Insn 88: point = 3
  BB 9
   Insn 85: point = 4
   Insn 84: point = 4
   Insn 83: point = 4
   Insn 82: point = 5
   Insn 81: point = 5
   Insn 80: point = 5
   Insn 79: point = 7
  BB 8
   Insn 77: point = 8
   Insn 76: point = 8
   Insn 75: point = 8
   Insn 74: point = 8
   Insn 73: point = 8
   Insn 72: point = 9
   Insn 71: point = 9
   Insn 70: point = 9
   Insn 69: point = 11
  BB 7
   Insn 67: point = 12
   Insn 66: point = 12
  BB 6
   Insn 64: point = 12
   Insn 63: point = 12
  BB 3
   Insn 98: point = 12
   Insn 30: point = 12
   Insn 29: point = 13
   Insn 28: point = 14
   Insn 27: point = 14
   Insn 26: point = 15
   Insn 25: point = 16
   Insn 24: point = 16
   Insn 23: point = 16
   Insn 22: point = 18
   Insn 21: point = 19
   Insn 20: point = 20
   Insn 19: point = 22
   Insn 18: point = 24
   Insn 17: point = 26
   Insn 16: point = 27
  BB 5
   Insn 60: point = 28
   Insn 59: point = 28
   Insn 58: point = 28
   Insn 57: point = 28
   Insn 56: point = 28
   Insn 55: point = 29
   Insn 54: point = 31
   Insn 53: point = 33
   Insn 102: point = 34
	Hard reg 2 is preferable by r125 with profit 1
   Insn 52: point = 36
   Insn 101: point = 36
	Hard reg 2 is preferable by r125 with profit 1
	Hard reg 0 is preferable by r125 with profit 1
   Insn 51: point = 38
   Insn 50: point = 39
   Insn 49: point = 41
   Insn 48: point = 42
   Insn 47: point = 43
   Insn 46: point = 45
   Insn 45: point = 47
   Insn 44: point = 48
   Insn 43: point = 50
   Insn 42: point = 52
   Insn 41: point = 53
   Insn 40: point = 55
   Insn 39: point = 56
   Insn 38: point = 56
  BB 4
   Insn 36: point = 56
   Insn 35: point = 56
  BB 2
   Insn 11: point = 56
   Insn 10: point = 56
   Insn 9: point = 57
   Insn 8: point = 59
   Insn 7: point = 60
   Insn 3: point = 61
   Insn 2: point = 62
 r87: [58..60]
 r88: [56..57]
 r91: [25..27]
 r92: [23..24]
 r93: [21..22]
 r94: [14..20]
 r95: [17..19]
 r96: [15..16]
 r97: [42..53]
 r98: [49..50]
 r99: [46..48]
 r100: [44..45]
 r101: [42..43]
 r102: [28..39]
 r103: [37..38]
 r104: [32..34]
 r105: [30..31]
 r106: [28..29]
 r107: [8..9]
 r108: [4..5]
 r109: [2..3]
 r110: [0..1]
 r111: [61..62]
 r112: [58..59]
 r114: [25..26]
 r115: [17..18]
 r116: [12..13]
 r117: [54..55]
 r118: [51..52]
 r119: [46..47]
 r120: [40..41]
 r121: [32..33]
 r122: [10..11]
 r123: [6..7]
 r125: [35..36]
Compressing live ranges: from 63 to 54 - 85%
Ranges after the compression:
 r87: [50..51]
 r88: [48..49]
 r91: [22..23]
 r92: [20..21]
 r93: [18..19]
 r94: [14..17]
 r95: [16..17]
 r96: [14..15]
 r97: [36..45]
 r98: [42..43]
 r99: [40..41]
 r100: [38..39]
 r101: [36..37]
 r102: [24..33]
 r103: [32..33]
 r104: [28..29]
 r105: [26..27]
 r106: [24..25]
 r107: [8..9]
 r108: [4..5]
 r109: [2..3]
 r110: [0..1]
 r111: [52..53]
 r112: [50..51]
 r114: [22..23]
 r115: [16..17]
 r116: [12..13]
 r117: [46..47]
 r118: [44..45]
 r119: [40..41]
 r120: [34..35]
 r121: [28..29]
 r122: [10..11]
 r123: [6..7]
 r125: [30..31]

********** Assignment #1: **********

	 Assigning to 125 (cl=GENERAL_REGS, orig=104, freq=3, tfirst=125, tfreq=3)...
	   Assign 0 to reload r125 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 27
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 26
changing reg in insn 41
changing reg in insn 48
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 56
changing reg in insn 51
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 70
changing reg in insn 73
changing reg in insn 80
changing reg in insn 83
changing reg in insn 88
changing reg in insn 91
changing reg in insn 91
changing reg in insn 95
changing reg in insn 2
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 69
changing reg in insn 70
changing reg in insn 79
changing reg in insn 80
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 27.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 84.


uint32_t InterruptManager::doHandleInterrupt(uint8_t, uint32_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={33d,30u} r1={11d,6u} r2={8d,3u,2e} r6={1d,36u} r7={16d,37u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={2e} r17={25d,5u} r18={4d} r19={4d} r20={1d,1u,5e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 502{375d,118u,9e} in 74{70 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 111 112
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 interruptNumber+0 S4 A32])) interrupts.cpp:96 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32])
        (reg:QI 0 ax [111])) interrupts.cpp:96 93 {*movqi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 dx [orig:87 D.1649 ] [87])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:98 138 {*zero_extendqisi2}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:98 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [orig:88 D.1650 ] [88])
        (mem/f/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:87 D.1649 ] [87])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [112])) [0 this_7(D)->handlers S4 A32])) interrupts.cpp:98 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:88 D.1650 ] [88])
            (const_int 0 [0]))) interrupts.cpp:98 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) interrupts.cpp:98 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 114 115 116
(note 12 11 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 12 17 3 (set (reg:SI 1 dx [orig:91 D.1649 ] [91])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:99 138 {*zero_extendqisi2}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:SI 0 ax [orig:92 D.1650 ] [92])
        (mem/f/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:91 D.1649 ] [91])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [114])) [0 this_7(D)->handlers S4 A32])) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg/f:SI 0 ax [orig:93 D.1651 ] [93])
        (mem/f/j:SI (reg/f:SI 0 ax [orig:92 D.1650 ] [92]) [0 _12->_vptr.InterruptHandler+0 S4 A32])) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg/f:SI 0 ax [orig:94 D.1652 ] [94])
        (mem/f:SI (reg/f:SI 0 ax [orig:93 D.1651 ] [93]) [0 *_13+0 S4 A32])) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 2 cx [orig:95 D.1649 ] [95])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:99 138 {*zero_extendqisi2}
     (nil))
(insn 22 21 23 3 (set (reg/f:SI 1 dx [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:SI 1 dx [orig:96 D.1650 ] [96])
        (mem/f/j:SI (plus:SI (mult:SI (reg:SI 2 cx [orig:95 D.1649 ] [95])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 dx [115])) [0 this_7(D)->handlers S4 A32])) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:99 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 25 24 26 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 esp+0 S4 A32])) interrupts.cpp:99 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 26 25 27 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 1 dx [orig:96 D.1650 ] [96])) interrupts.cpp:99 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 27 26 28 3 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:94 D.1652 ] [94]) [0 *OBJ_TYPE_REF(_14;(struct InterruptHandler)_10->0) S1 A8])
            (const_int 16 [0x10]))) interrupts.cpp:99 668 {*call_value}
     (nil)
    (nil))
(insn 28 27 29 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:99 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 29 28 30 3 (set (reg:SI 0 ax [116])
        (reg:SI 0 ax)) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(insn 30 29 98 3 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 esp+0 S4 A32])
        (reg:SI 0 ax [116])) interrupts.cpp:99 90 {*movsi_internal}
     (nil))
(jump_insn 98 30 99 3 (set (pc)
        (label_ref 61)) 654 {jump}
     (nil)
 -> 61)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 99 98 33)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 33 99 34 4 20 "" [1 uses])
(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32])
            (const_int 32 [0x20]))) interrupts.cpp:101 5 {*cmpqi_1}
     (nil))
(jump_insn 36 35 37 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) interrupts.cpp:101 612 {*jcc_1}
     (nil)
 -> 61)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 99 100 101 102 103 104 105 106 117 118 119 120 121
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 foo+0 S4 A32])
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7f920471c2d0 *.LC0>)) interrupts.cpp:102 90 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 hex+0 S4 A32])
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f920471c360 *.LC1>)) interrupts.cpp:103 90 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 foo+0 S4 A32])) interrupts.cpp:104 90 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (parallel [
            (set (reg/f:SI 1 dx [orig:97 D.1653 ] [97])
                (plus:SI (reg/f:SI 0 ax [117])
                    (const_int 22 [0x16])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:104 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 foo+0 S4 A32])
            (const_int 22 [0x16]))
        (nil)))
(insn 42 41 43 5 (set (reg:QI 0 ax [118])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32])) interrupts.cpp:104 93 {*movqi_internal}
     (nil))
(insn 43 42 44 5 (parallel [
            (set (reg:QI 0 ax [orig:98 D.1654 ] [98])
                (lshiftrt:QI (reg:QI 0 ax [118])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:104 552 {*lshrqi3_1}
     (expr_list:REG_EQUAL (lshiftrt:QI (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 interruptNumber+0 S1 A32])
            (const_int 4 [0x4]))
        (nil)))
(insn 44 43 45 5 (set (reg:SI 2 cx [orig:99 D.1655 ] [99])
        (zero_extend:SI (reg:QI 0 ax [orig:98 D.1654 ] [98]))) interrupts.cpp:104 138 {*zero_extendqisi2}
     (nil))
(insn 45 44 46 5 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 hex+0 S4 A32])) interrupts.cpp:104 90 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg/f:SI 0 ax [orig:100 D.1653 ] [100])
                (plus:SI (reg/f:SI 0 ax [119])
                    (reg:SI 2 cx [orig:99 D.1655 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:104 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 hex+0 S4 A32])
            (reg:SI 2 cx [orig:99 D.1655 ] [99]))
        (nil)))
(insn 47 46 48 5 (set (reg:QI 0 ax [orig:101 D.1656 ] [101])
        (mem:QI (reg/f:SI 0 ax [orig:100 D.1653 ] [100]) [0 *_25+0 S1 A8])) interrupts.cpp:104 93 {*movqi_internal}
     (nil))
(insn 48 47 49 5 (set (mem:QI (reg/f:SI 1 dx [orig:97 D.1653 ] [97]) [0 *_22+0 S1 A8])
        (reg:QI 0 ax [orig:101 D.1656 ] [101])) interrupts.cpp:104 93 {*movqi_internal}
     (nil))
(insn 49 48 50 5 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 foo+0 S4 A32])) interrupts.cpp:105 90 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg/f:SI 1 dx [orig:102 D.1653 ] [102])
                (plus:SI (reg/f:SI 0 ax [120])
                    (const_int 23 [0x17])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:105 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 foo+0 S4 A32])
            (const_int 23 [0x17]))
        (nil)))
(insn 51 50 101 5 (set (reg:SI 0 ax [orig:103 D.1655 ] [103])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32]))) interrupts.cpp:105 138 {*zero_extendqisi2}
     (nil))
(insn 101 51 52 5 (set (reg:SI 0 ax [orig:104 D.1655 ] [104])
        (reg:SI 0 ax [orig:103 D.1655 ] [103])) interrupts.cpp:105 90 {*movsi_internal}
     (nil))
(insn 52 101 102 5 (parallel [
            (set (reg:SI 0 ax [orig:104 D.1655 ] [104])
                (and:SI (reg:SI 0 ax [orig:104 D.1655 ] [104])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:105 381 {*andsi_1}
     (nil))
(insn 102 52 53 5 (set (reg:SI 2 cx [orig:104 D.1655 ] [104])
        (reg:SI 0 ax [orig:104 D.1655 ] [104])) interrupts.cpp:105 90 {*movsi_internal}
     (nil))
(insn 53 102 54 5 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 hex+0 S4 A32])) interrupts.cpp:105 90 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (parallel [
            (set (reg/f:SI 0 ax [orig:105 D.1653 ] [105])
                (plus:SI (reg/f:SI 0 ax [121])
                    (reg:SI 2 cx [orig:104 D.1655 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:105 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 hex+0 S4 A32])
            (reg:SI 2 cx [orig:104 D.1655 ] [104]))
        (nil)))
(insn 55 54 56 5 (set (reg:QI 0 ax [orig:106 D.1656 ] [106])
        (mem:QI (reg/f:SI 0 ax [orig:105 D.1653 ] [105]) [0 *_31+0 S1 A8])) interrupts.cpp:105 93 {*movqi_internal}
     (nil))
(insn 56 55 57 5 (set (mem:QI (reg/f:SI 1 dx [orig:102 D.1653 ] [102]) [0 *_28+0 S1 A8])
        (reg:QI 0 ax [orig:106 D.1656 ] [106])) interrupts.cpp:105 93 {*movqi_internal}
     (nil))
(insn 57 56 58 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:106 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 58 57 59 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 foo+0 S4 A32])) interrupts.cpp:106 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 59 58 60 5 (call (mem:QI (symbol_ref:SI ("_Z6printfPc") [flags 0x41]  <function_decl 0x7f92046a7a20 printf>) [0 printf S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:106 659 {*call}
     (nil)
    (nil))
(insn 60 59 61 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:106 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;;              3 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 61 60 62 6 21 "" [2 uses])
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 6 (set (reg:CC 17 flags)
        (compare:CC (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32])
            (const_int 31 [0x1f]))) interrupts.cpp:109 5 {*cmpqi_1}
     (nil))
(jump_insn 64 63 65 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) interrupts.cpp:109 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 65 64 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 7 (set (reg:CC 17 flags)
        (compare:CC (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32])
            (const_int 47 [0x2f]))) interrupts.cpp:109 5 {*cmpqi_1}
     (nil))
(jump_insn 67 66 68 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) interrupts.cpp:109 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 122
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 8 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:111 90 {*movsi_internal}
     (nil))
(insn 70 69 71 8 (parallel [
            (set (reg/f:SI 0 ax [orig:107 D.1657 ] [107])
                (plus:SI (reg/f:SI 0 ax [122])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:111 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1024 [0x400]))
        (nil)))
(insn 71 70 72 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:111 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 72 71 73 8 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 32 [0x20])) interrupts.cpp:111 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 73 72 74 8 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:107 D.1657 ] [107])) interrupts.cpp:111 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 74 73 75 8 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:111 659 {*call}
     (nil)
    (nil))
(insn 75 74 76 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:111 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 76 75 77 8 (set (reg:CC 17 flags)
        (compare:CC (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 interruptNumber+0 S1 A32])
            (const_int 39 [0x27]))) interrupts.cpp:112 5 {*cmpqi_1}
     (nil))
(jump_insn 77 76 78 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) interrupts.cpp:112 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 123
(note 78 77 79 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 9 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 this+0 S4 A32])) interrupts.cpp:114 90 {*movsi_internal}
     (nil))
(insn 80 79 81 9 (parallel [
            (set (reg/f:SI 0 ax [orig:108 D.1657 ] [108])
                (plus:SI (reg/f:SI 0 ax [123])
                    (const_int 1032 [0x408])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:114 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [0 this+0 S4 A32])
            (const_int 1032 [0x408]))
        (nil)))
(insn 81 80 82 9 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:114 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 82 81 83 9 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 32 [0x20])) interrupts.cpp:114 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 83 82 84 9 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:108 D.1657 ] [108])) interrupts.cpp:114 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 84 83 85 9 (call (mem:QI (symbol_ref:SI ("_ZN12Port8BitSlow5WriteEh") [flags 0x41]  <function_decl 0x7f920468dbd0 Write>) [0 Write S1 A8])
        (const_int 16 [0x10])) interrupts.cpp:114 659 {*call}
     (nil)
    (nil))
(insn 85 84 86 9 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) interrupts.cpp:114 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7
;;              9 (FALLTHRU)
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 109 110
(code_label 86 85 87 10 22 "" [3 uses])
(note 87 86 88 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 91 10 (set (reg:SI 0 ax [orig:109 D.1658 ] [109])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 esp+0 S4 A32])) interrupts.cpp:119 90 {*movsi_internal}
     (nil))
(insn 91 88 95 10 (set (reg:SI 0 ax [orig:110 <retval> ] [110])
        (reg:SI 0 ax [orig:109 D.1658 ] [109])) interrupts.cpp:119 90 {*movsi_internal}
     (nil))
(insn 95 91 96 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:110 <retval> ] [110])) interrupts.cpp:120 90 {*movsi_internal}
     (nil))
(insn 96 95 100 10 (use (reg/i:SI 0 ax)) interrupts.cpp:120 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 100 96 0 NOTE_INSN_DELETED)
